// megafunction wizard: %ALTFP_ADD_SUB%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: altfp_add_sub 

// ============================================================
// File Name: AlteraAdder.v
// Megafunction Name(s):
// 			altfp_add_sub
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 18.1.0 Build 625 09/12/2018 SJ Lite Edition
// ************************************************************


//Copyright (C) 2018  Intel Corporation. All rights reserved.
//Your use of Intel Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Intel Program License 
//Subscription Agreement, the Intel Quartus Prime License Agreement,
//the Intel FPGA IP License Agreement, or other applicable license
//agreement, including, without limitation, that your use is for
//the sole purpose of programming logic devices manufactured by
//Intel and sold by Intel or its authorized distributors.  Please
//refer to the applicable agreement for further details.


//altfp_add_sub DENORMAL_SUPPORT="NO" DEVICE_FAMILY="Cyclone V" DIRECTION="ADD" OPTIMIZE="AREA" PIPELINE=14 REDUCED_FUNCTIONALITY="NO" WIDTH_EXP=11 WIDTH_MAN=52 clock dataa datab result
//VERSION_BEGIN 18.1 cbx_altbarrel_shift 2018:09:12:13:04:24:SJ cbx_altfp_add_sub 2018:09:12:13:04:24:SJ cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//altbarrel_shift DEVICE_FAMILY="Cyclone V" PIPELINE=2 SHIFTDIR="LEFT" WIDTH=55 WIDTHDIST=6 aclr clk_en clock data distance result
//VERSION_BEGIN 18.1 cbx_altbarrel_shift 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END

//synthesis_resources = reg 115 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altbarrel_shift
	( 
	aclr,
	clk_en,
	clock,
	data,
	distance,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clk_en;
	input   clock;
	input   [54:0]  data;
	input   [5:0]  distance;
	output   [54:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clk_en;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[1:0]	dir_pipe;
	reg	[54:0]	sbit_piper1d;
	reg	[54:0]	sbit_piper2d;
	reg	sel_pipec3r1d;
	reg	sel_pipec4r1d;
	reg	sel_pipec5r1d;
	wire  [6:0]  dir_w;
	wire  direction_w;
	wire  [31:0]  pad_w;
	wire  [384:0]  sbit_w;
	wire  [5:0]  sel_w;
	wire  [329:0]  smux_w;

	// synopsys translate_off
	initial
		dir_pipe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dir_pipe <= 2'b0;
		else if  (clk_en == 1'b1)   dir_pipe <= {dir_w[5], dir_w[2]};
	// synopsys translate_off
	initial
		sbit_piper1d = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sbit_piper1d <= 55'b0;
		else if  (clk_en == 1'b1)   sbit_piper1d <= smux_w[164:110];
	// synopsys translate_off
	initial
		sbit_piper2d = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sbit_piper2d <= 55'b0;
		else if  (clk_en == 1'b1)   sbit_piper2d <= smux_w[329:275];
	// synopsys translate_off
	initial
		sel_pipec3r1d = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sel_pipec3r1d <= 1'b0;
		else if  (clk_en == 1'b1)   sel_pipec3r1d <= distance[3];
	// synopsys translate_off
	initial
		sel_pipec4r1d = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sel_pipec4r1d <= 1'b0;
		else if  (clk_en == 1'b1)   sel_pipec4r1d <= distance[4];
	// synopsys translate_off
	initial
		sel_pipec5r1d = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sel_pipec5r1d <= 1'b0;
		else if  (clk_en == 1'b1)   sel_pipec5r1d <= distance[5];
	assign
		dir_w = {dir_pipe[1], dir_w[4:3], dir_pipe[0], dir_w[1:0], direction_w},
		direction_w = 1'b0,
		pad_w = {32{1'b0}},
		result = sbit_w[384:330],
		sbit_w = {sbit_piper2d, smux_w[274:165], sbit_piper1d, smux_w[109:0], data},
		sel_w = {sel_pipec5r1d, sel_pipec4r1d, sel_pipec3r1d, distance[2:0]},
		smux_w = {((({55{(sel_w[5] & (~ dir_w[5]))}} & {sbit_w[297:275], pad_w[31:0]}) | ({55{(sel_w[5] & dir_w[5])}} & {pad_w[31:0], sbit_w[329:307]})) | ({55{(~ sel_w[5])}} & sbit_w[329:275])), ((({55{(sel_w[4] & (~ dir_w[4]))}} & {sbit_w[258:220], pad_w[15:0]}) | ({55{(sel_w[4] & dir_w[4])}} & {pad_w[15:0], sbit_w[274:236]})) | ({55{(~ sel_w[4])}} & sbit_w[274:220])), ((({55{(sel_w[3] & (~ dir_w[3]))}} & {sbit_w[211:165], pad_w[7:0]}) | ({55{(sel_w[3] & dir_w[3])}} & {pad_w[7:0], sbit_w[219:173]})) | ({55{(~ sel_w[3])}} & sbit_w[219:165])), ((({55{(sel_w[2] & (~ dir_w[2]))}} & {sbit_w[160:110], pad_w[3:0]}) | ({55{(sel_w[2] & dir_w[2])}} & {pad_w[3:0], sbit_w[164:114]})) | ({55{(~ sel_w[2])}} & sbit_w[164:110])), ((({55{(sel_w[1] & (~ dir_w[1]))}} & {sbit_w[107:55], pad_w[1:0]}) | ({55{(sel_w[1] & dir_w[1])}} & {pad_w[1:0], sbit_w[109:57]})) | ({55{(~ sel_w[1])}} & sbit_w[109:55])), ((({55{(sel_w[0] & (~ dir_w[0]))}} & {sbit_w[53:0], pad_w[0]}) | ({55{(sel_w[0] & dir_w[0])}} & {pad_w[0], sbit_w[54:1]})) | ({55{(~ sel_w[0])}} & sbit_w[54:0]))};
endmodule //AlteraAdder_altbarrel_shift


//altbarrel_shift DEVICE_FAMILY="Cyclone V" PIPELINE=1 REGISTER_OUTPUT="NO" SHIFTDIR="RIGHT" WIDTH=55 WIDTHDIST=6 aclr clk_en clock data distance result
//VERSION_BEGIN 18.1 cbx_altbarrel_shift 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END

//synthesis_resources = reg 59 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altbarrel_shift1
	( 
	aclr,
	clk_en,
	clock,
	data,
	distance,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clk_en;
	input   clock;
	input   [54:0]  data;
	input   [5:0]  distance;
	output   [54:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clk_en;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[0:0]	dir_pipe;
	reg	[54:0]	sbit_piper1d;
	reg	sel_pipec3r1d;
	reg	sel_pipec4r1d;
	reg	sel_pipec5r1d;
	wire  [6:0]  dir_w;
	wire  direction_w;
	wire  [31:0]  pad_w;
	wire  [384:0]  sbit_w;
	wire  [5:0]  sel_w;
	wire  [329:0]  smux_w;

	// synopsys translate_off
	initial
		dir_pipe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dir_pipe <= 1'b0;
		else if  (clk_en == 1'b1)   dir_pipe <= {dir_w[2]};
	// synopsys translate_off
	initial
		sbit_piper1d = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sbit_piper1d <= 55'b0;
		else if  (clk_en == 1'b1)   sbit_piper1d <= smux_w[164:110];
	// synopsys translate_off
	initial
		sel_pipec3r1d = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sel_pipec3r1d <= 1'b0;
		else if  (clk_en == 1'b1)   sel_pipec3r1d <= distance[3];
	// synopsys translate_off
	initial
		sel_pipec4r1d = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sel_pipec4r1d <= 1'b0;
		else if  (clk_en == 1'b1)   sel_pipec4r1d <= distance[4];
	// synopsys translate_off
	initial
		sel_pipec5r1d = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sel_pipec5r1d <= 1'b0;
		else if  (clk_en == 1'b1)   sel_pipec5r1d <= distance[5];
	assign
		dir_w = {dir_w[5:3], dir_pipe[0], dir_w[1:0], direction_w},
		direction_w = 1'b1,
		pad_w = {32{1'b0}},
		result = sbit_w[384:330],
		sbit_w = {smux_w[329:165], sbit_piper1d, smux_w[109:0], data},
		sel_w = {sel_pipec5r1d, sel_pipec4r1d, sel_pipec3r1d, distance[2:0]},
		smux_w = {((({55{(sel_w[5] & (~ dir_w[5]))}} & {sbit_w[297:275], pad_w[31:0]}) | ({55{(sel_w[5] & dir_w[5])}} & {pad_w[31:0], sbit_w[329:307]})) | ({55{(~ sel_w[5])}} & sbit_w[329:275])), ((({55{(sel_w[4] & (~ dir_w[4]))}} & {sbit_w[258:220], pad_w[15:0]}) | ({55{(sel_w[4] & dir_w[4])}} & {pad_w[15:0], sbit_w[274:236]})) | ({55{(~ sel_w[4])}} & sbit_w[274:220])), ((({55{(sel_w[3] & (~ dir_w[3]))}} & {sbit_w[211:165], pad_w[7:0]}) | ({55{(sel_w[3] & dir_w[3])}} & {pad_w[7:0], sbit_w[219:173]})) | ({55{(~ sel_w[3])}} & sbit_w[219:165])), ((({55{(sel_w[2] & (~ dir_w[2]))}} & {sbit_w[160:110], pad_w[3:0]}) | ({55{(sel_w[2] & dir_w[2])}} & {pad_w[3:0], sbit_w[164:114]})) | ({55{(~ sel_w[2])}} & sbit_w[164:110])), ((({55{(sel_w[1] & (~ dir_w[1]))}} & {sbit_w[107:55], pad_w[1:0]}) | ({55{(sel_w[1] & dir_w[1])}} & {pad_w[1:0], sbit_w[109:57]})) | ({55{(~ sel_w[1])}} & sbit_w[109:55])), ((({55{(sel_w[0] & (~ dir_w[0]))}} & {sbit_w[53:0], pad_w[0]}) | ({55{(sel_w[0] & dir_w[0])}} & {pad_w[0], sbit_w[54:1]})) | ({55{(~ sel_w[0])}} & sbit_w[54:0]))};
endmodule //AlteraAdder_altbarrel_shift1


//altpriority_encoder PIPELINE=1 WIDTH=64 WIDTHAD=6 aclr clk_en clock data q
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END


//altpriority_encoder LSB_PRIORITY="NO" PIPELINE=0 WIDTH=32 WIDTHAD=5 data q
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END


//altpriority_encoder LSB_PRIORITY="NO" WIDTH=16 WIDTHAD=4 data q
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END


//altpriority_encoder LSB_PRIORITY="NO" WIDTH=8 WIDTHAD=3 data q
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END


//altpriority_encoder LSB_PRIORITY="NO" WIDTH=4 WIDTHAD=2 data q
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END


//altpriority_encoder LSB_PRIORITY="NO" WIDTH=2 WIDTHAD=1 data q
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder12345
	( 
	data,
	q) /* synthesis synthesis_clearbox=1 */;
	input   [1:0]  data;
	output   [0:0]  q;


	assign
		q = {data[1]};
endmodule //AlteraAdder_altpriority_encoder12345


//altpriority_encoder LSB_PRIORITY="NO" WIDTH=2 WIDTHAD=1 data q zero
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder123456
	( 
	data,
	q,
	zero) /* synthesis synthesis_clearbox=1 */;
	input   [1:0]  data;
	output   [0:0]  q;
	output   zero;


	assign
		q = {data[1]},
		zero = (~ (data[0] | data[1]));
endmodule //AlteraAdder_altpriority_encoder123456

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder1234
	( 
	data,
	q) /* synthesis synthesis_clearbox=1 */;
	input   [3:0]  data;
	output   [1:0]  q;

	wire  [0:0]   wire_altpriority_encoder18_q;
	wire  [0:0]   wire_altpriority_encoder19_q;
	wire  wire_altpriority_encoder19_zero;

	AlteraAdder_altpriority_encoder12345   altpriority_encoder18
	( 
	.data(data[1:0]),
	.q(wire_altpriority_encoder18_q));
	AlteraAdder_altpriority_encoder123456   altpriority_encoder19
	( 
	.data(data[3:2]),
	.q(wire_altpriority_encoder19_q),
	.zero(wire_altpriority_encoder19_zero));
	assign
		q = {(~ wire_altpriority_encoder19_zero), ((wire_altpriority_encoder19_zero & wire_altpriority_encoder18_q) | ((~ wire_altpriority_encoder19_zero) & wire_altpriority_encoder19_q))};
endmodule //AlteraAdder_altpriority_encoder1234


//altpriority_encoder LSB_PRIORITY="NO" WIDTH=4 WIDTHAD=2 data q zero
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder1234567
	( 
	data,
	q,
	zero) /* synthesis synthesis_clearbox=1 */;
	input   [3:0]  data;
	output   [1:0]  q;
	output   zero;

	wire  [0:0]   wire_altpriority_encoder20_q;
	wire  wire_altpriority_encoder20_zero;
	wire  [0:0]   wire_altpriority_encoder21_q;
	wire  wire_altpriority_encoder21_zero;

	AlteraAdder_altpriority_encoder123456   altpriority_encoder20
	( 
	.data(data[1:0]),
	.q(wire_altpriority_encoder20_q),
	.zero(wire_altpriority_encoder20_zero));
	AlteraAdder_altpriority_encoder123456   altpriority_encoder21
	( 
	.data(data[3:2]),
	.q(wire_altpriority_encoder21_q),
	.zero(wire_altpriority_encoder21_zero));
	assign
		q = {(~ wire_altpriority_encoder21_zero), ((wire_altpriority_encoder21_zero & wire_altpriority_encoder20_q) | ((~ wire_altpriority_encoder21_zero) & wire_altpriority_encoder21_q))},
		zero = (wire_altpriority_encoder20_zero & wire_altpriority_encoder21_zero);
endmodule //AlteraAdder_altpriority_encoder1234567

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder123
	( 
	data,
	q) /* synthesis synthesis_clearbox=1 */;
	input   [7:0]  data;
	output   [2:0]  q;

	wire  [1:0]   wire_altpriority_encoder16_q;
	wire  [1:0]   wire_altpriority_encoder17_q;
	wire  wire_altpriority_encoder17_zero;

	AlteraAdder_altpriority_encoder1234   altpriority_encoder16
	( 
	.data(data[3:0]),
	.q(wire_altpriority_encoder16_q));
	AlteraAdder_altpriority_encoder1234567   altpriority_encoder17
	( 
	.data(data[7:4]),
	.q(wire_altpriority_encoder17_q),
	.zero(wire_altpriority_encoder17_zero));
	assign
		q = {(~ wire_altpriority_encoder17_zero), (({2{wire_altpriority_encoder17_zero}} & wire_altpriority_encoder16_q) | ({2{(~ wire_altpriority_encoder17_zero)}} & wire_altpriority_encoder17_q))};
endmodule //AlteraAdder_altpriority_encoder123


//altpriority_encoder LSB_PRIORITY="NO" WIDTH=8 WIDTHAD=3 data q zero
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder12345678
	( 
	data,
	q,
	zero) /* synthesis synthesis_clearbox=1 */;
	input   [7:0]  data;
	output   [2:0]  q;
	output   zero;

	wire  [1:0]   wire_altpriority_encoder22_q;
	wire  wire_altpriority_encoder22_zero;
	wire  [1:0]   wire_altpriority_encoder23_q;
	wire  wire_altpriority_encoder23_zero;

	AlteraAdder_altpriority_encoder1234567   altpriority_encoder22
	( 
	.data(data[3:0]),
	.q(wire_altpriority_encoder22_q),
	.zero(wire_altpriority_encoder22_zero));
	AlteraAdder_altpriority_encoder1234567   altpriority_encoder23
	( 
	.data(data[7:4]),
	.q(wire_altpriority_encoder23_q),
	.zero(wire_altpriority_encoder23_zero));
	assign
		q = {(~ wire_altpriority_encoder23_zero), (({2{wire_altpriority_encoder23_zero}} & wire_altpriority_encoder22_q) | ({2{(~ wire_altpriority_encoder23_zero)}} & wire_altpriority_encoder23_q))},
		zero = (wire_altpriority_encoder22_zero & wire_altpriority_encoder23_zero);
endmodule //AlteraAdder_altpriority_encoder12345678

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder12
	( 
	data,
	q) /* synthesis synthesis_clearbox=1 */;
	input   [15:0]  data;
	output   [3:0]  q;

	wire  [2:0]   wire_altpriority_encoder14_q;
	wire  [2:0]   wire_altpriority_encoder15_q;
	wire  wire_altpriority_encoder15_zero;

	AlteraAdder_altpriority_encoder123   altpriority_encoder14
	( 
	.data(data[7:0]),
	.q(wire_altpriority_encoder14_q));
	AlteraAdder_altpriority_encoder12345678   altpriority_encoder15
	( 
	.data(data[15:8]),
	.q(wire_altpriority_encoder15_q),
	.zero(wire_altpriority_encoder15_zero));
	assign
		q = {(~ wire_altpriority_encoder15_zero), (({3{wire_altpriority_encoder15_zero}} & wire_altpriority_encoder14_q) | ({3{(~ wire_altpriority_encoder15_zero)}} & wire_altpriority_encoder15_q))};
endmodule //AlteraAdder_altpriority_encoder12


//altpriority_encoder LSB_PRIORITY="NO" WIDTH=16 WIDTHAD=4 data q zero
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder123456789
	( 
	data,
	q,
	zero) /* synthesis synthesis_clearbox=1 */;
	input   [15:0]  data;
	output   [3:0]  q;
	output   zero;

	wire  [2:0]   wire_altpriority_encoder24_q;
	wire  wire_altpriority_encoder24_zero;
	wire  [2:0]   wire_altpriority_encoder25_q;
	wire  wire_altpriority_encoder25_zero;

	AlteraAdder_altpriority_encoder12345678   altpriority_encoder24
	( 
	.data(data[7:0]),
	.q(wire_altpriority_encoder24_q),
	.zero(wire_altpriority_encoder24_zero));
	AlteraAdder_altpriority_encoder12345678   altpriority_encoder25
	( 
	.data(data[15:8]),
	.q(wire_altpriority_encoder25_q),
	.zero(wire_altpriority_encoder25_zero));
	assign
		q = {(~ wire_altpriority_encoder25_zero), (({3{wire_altpriority_encoder25_zero}} & wire_altpriority_encoder24_q) | ({3{(~ wire_altpriority_encoder25_zero)}} & wire_altpriority_encoder25_q))},
		zero = (wire_altpriority_encoder24_zero & wire_altpriority_encoder25_zero);
endmodule //AlteraAdder_altpriority_encoder123456789

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder1
	( 
	data,
	q) /* synthesis synthesis_clearbox=1 */;
	input   [31:0]  data;
	output   [4:0]  q;

	wire  [3:0]   wire_altpriority_encoder12_q;
	wire  [3:0]   wire_altpriority_encoder13_q;
	wire  wire_altpriority_encoder13_zero;

	AlteraAdder_altpriority_encoder12   altpriority_encoder12
	( 
	.data(data[15:0]),
	.q(wire_altpriority_encoder12_q));
	AlteraAdder_altpriority_encoder123456789   altpriority_encoder13
	( 
	.data(data[31:16]),
	.q(wire_altpriority_encoder13_q),
	.zero(wire_altpriority_encoder13_zero));
	assign
		q = {(~ wire_altpriority_encoder13_zero), (({4{wire_altpriority_encoder13_zero}} & wire_altpriority_encoder12_q) | ({4{(~ wire_altpriority_encoder13_zero)}} & wire_altpriority_encoder13_q))};
endmodule //AlteraAdder_altpriority_encoder1


//altpriority_encoder LSB_PRIORITY="NO" PIPELINE=0 WIDTH=32 WIDTHAD=5 data q zero
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder12345678910
	( 
	data,
	q,
	zero) /* synthesis synthesis_clearbox=1 */;
	input   [31:0]  data;
	output   [4:0]  q;
	output   zero;

	wire  [3:0]   wire_altpriority_encoder26_q;
	wire  wire_altpriority_encoder26_zero;
	wire  [3:0]   wire_altpriority_encoder27_q;
	wire  wire_altpriority_encoder27_zero;

	AlteraAdder_altpriority_encoder123456789   altpriority_encoder26
	( 
	.data(data[15:0]),
	.q(wire_altpriority_encoder26_q),
	.zero(wire_altpriority_encoder26_zero));
	AlteraAdder_altpriority_encoder123456789   altpriority_encoder27
	( 
	.data(data[31:16]),
	.q(wire_altpriority_encoder27_q),
	.zero(wire_altpriority_encoder27_zero));
	assign
		q = {(~ wire_altpriority_encoder27_zero), (({4{wire_altpriority_encoder27_zero}} & wire_altpriority_encoder26_q) | ({4{(~ wire_altpriority_encoder27_zero)}} & wire_altpriority_encoder27_q))},
		zero = (wire_altpriority_encoder26_zero & wire_altpriority_encoder27_zero);
endmodule //AlteraAdder_altpriority_encoder12345678910

//synthesis_resources = reg 6 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder
	( 
	aclr,
	clk_en,
	clock,
	data,
	q) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clk_en;
	input   clock;
	input   [63:0]  data;
	output   [5:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clk_en;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [4:0]   wire_altpriority_encoder10_q;
	wire  [4:0]   wire_altpriority_encoder11_q;
	wire  wire_altpriority_encoder11_zero;
	reg	[5:0]	pipeline_q_dffe;
	wire  [5:0]  tmp_q_wire;

	AlteraAdder_altpriority_encoder1   altpriority_encoder10
	( 
	.data(data[31:0]),
	.q(wire_altpriority_encoder10_q));
	AlteraAdder_altpriority_encoder12345678910   altpriority_encoder11
	( 
	.data(data[63:32]),
	.q(wire_altpriority_encoder11_q),
	.zero(wire_altpriority_encoder11_zero));
	// synopsys translate_off
	initial
		pipeline_q_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) pipeline_q_dffe <= 6'b0;
		else if  (clk_en == 1'b1)   pipeline_q_dffe <= tmp_q_wire;
	assign
		q = pipeline_q_dffe,
		tmp_q_wire = {(~ wire_altpriority_encoder11_zero), (({5{wire_altpriority_encoder11_zero}} & wire_altpriority_encoder10_q) | ({5{(~ wire_altpriority_encoder11_zero)}} & wire_altpriority_encoder11_q))};
endmodule //AlteraAdder_altpriority_encoder


//altpriority_encoder LSB_PRIORITY="YES" PIPELINE=1 WIDTH=64 WIDTHAD=6 aclr clk_en clock data q
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END


//altpriority_encoder LSB_PRIORITY="YES" PIPELINE=0 WIDTH=32 WIDTHAD=5 data q zero
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END


//altpriority_encoder LSB_PRIORITY="YES" WIDTH=16 WIDTHAD=4 data q zero
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END


//altpriority_encoder LSB_PRIORITY="YES" WIDTH=8 WIDTHAD=3 data q zero
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END


//altpriority_encoder LSB_PRIORITY="YES" WIDTH=4 WIDTHAD=2 data q zero
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END


//altpriority_encoder LSB_PRIORITY="YES" WIDTH=2 WIDTHAD=1 data q zero
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder12345678910111213141516
	( 
	data,
	q,
	zero) /* synthesis synthesis_clearbox=1 */;
	input   [1:0]  data;
	output   [0:0]  q;
	output   zero;


	assign
		q = {(~ data[0])},
		zero = (~ (data[0] | data[1]));
endmodule //AlteraAdder_altpriority_encoder12345678910111213141516

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder123456789101112131415
	( 
	data,
	q,
	zero) /* synthesis synthesis_clearbox=1 */;
	input   [3:0]  data;
	output   [1:0]  q;
	output   zero;

	wire  [0:0]   wire_altpriority_encoder36_q;
	wire  wire_altpriority_encoder36_zero;
	wire  [0:0]   wire_altpriority_encoder37_q;
	wire  wire_altpriority_encoder37_zero;

	AlteraAdder_altpriority_encoder12345678910111213141516   altpriority_encoder36
	( 
	.data(data[1:0]),
	.q(wire_altpriority_encoder36_q),
	.zero(wire_altpriority_encoder36_zero));
	AlteraAdder_altpriority_encoder12345678910111213141516   altpriority_encoder37
	( 
	.data(data[3:2]),
	.q(wire_altpriority_encoder37_q),
	.zero(wire_altpriority_encoder37_zero));
	assign
		q = {wire_altpriority_encoder36_zero, ((wire_altpriority_encoder36_zero & wire_altpriority_encoder37_q) | ((~ wire_altpriority_encoder36_zero) & wire_altpriority_encoder36_q))},
		zero = (wire_altpriority_encoder36_zero & wire_altpriority_encoder37_zero);
endmodule //AlteraAdder_altpriority_encoder123456789101112131415

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder1234567891011121314
	( 
	data,
	q,
	zero) /* synthesis synthesis_clearbox=1 */;
	input   [7:0]  data;
	output   [2:0]  q;
	output   zero;

	wire  [1:0]   wire_altpriority_encoder34_q;
	wire  wire_altpriority_encoder34_zero;
	wire  [1:0]   wire_altpriority_encoder35_q;
	wire  wire_altpriority_encoder35_zero;

	AlteraAdder_altpriority_encoder123456789101112131415   altpriority_encoder34
	( 
	.data(data[3:0]),
	.q(wire_altpriority_encoder34_q),
	.zero(wire_altpriority_encoder34_zero));
	AlteraAdder_altpriority_encoder123456789101112131415   altpriority_encoder35
	( 
	.data(data[7:4]),
	.q(wire_altpriority_encoder35_q),
	.zero(wire_altpriority_encoder35_zero));
	assign
		q = {wire_altpriority_encoder34_zero, (({2{wire_altpriority_encoder34_zero}} & wire_altpriority_encoder35_q) | ({2{(~ wire_altpriority_encoder34_zero)}} & wire_altpriority_encoder34_q))},
		zero = (wire_altpriority_encoder34_zero & wire_altpriority_encoder35_zero);
endmodule //AlteraAdder_altpriority_encoder1234567891011121314

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder12345678910111213
	( 
	data,
	q,
	zero) /* synthesis synthesis_clearbox=1 */;
	input   [15:0]  data;
	output   [3:0]  q;
	output   zero;

	wire  [2:0]   wire_altpriority_encoder32_q;
	wire  wire_altpriority_encoder32_zero;
	wire  [2:0]   wire_altpriority_encoder33_q;
	wire  wire_altpriority_encoder33_zero;

	AlteraAdder_altpriority_encoder1234567891011121314   altpriority_encoder32
	( 
	.data(data[7:0]),
	.q(wire_altpriority_encoder32_q),
	.zero(wire_altpriority_encoder32_zero));
	AlteraAdder_altpriority_encoder1234567891011121314   altpriority_encoder33
	( 
	.data(data[15:8]),
	.q(wire_altpriority_encoder33_q),
	.zero(wire_altpriority_encoder33_zero));
	assign
		q = {wire_altpriority_encoder32_zero, (({3{wire_altpriority_encoder32_zero}} & wire_altpriority_encoder33_q) | ({3{(~ wire_altpriority_encoder32_zero)}} & wire_altpriority_encoder32_q))},
		zero = (wire_altpriority_encoder32_zero & wire_altpriority_encoder33_zero);
endmodule //AlteraAdder_altpriority_encoder12345678910111213

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder123456789101112
	( 
	data,
	q,
	zero) /* synthesis synthesis_clearbox=1 */;
	input   [31:0]  data;
	output   [4:0]  q;
	output   zero;

	wire  [3:0]   wire_altpriority_encoder30_q;
	wire  wire_altpriority_encoder30_zero;
	wire  [3:0]   wire_altpriority_encoder31_q;
	wire  wire_altpriority_encoder31_zero;

	AlteraAdder_altpriority_encoder12345678910111213   altpriority_encoder30
	( 
	.data(data[15:0]),
	.q(wire_altpriority_encoder30_q),
	.zero(wire_altpriority_encoder30_zero));
	AlteraAdder_altpriority_encoder12345678910111213   altpriority_encoder31
	( 
	.data(data[31:16]),
	.q(wire_altpriority_encoder31_q),
	.zero(wire_altpriority_encoder31_zero));
	assign
		q = {wire_altpriority_encoder30_zero, (({4{wire_altpriority_encoder30_zero}} & wire_altpriority_encoder31_q) | ({4{(~ wire_altpriority_encoder30_zero)}} & wire_altpriority_encoder30_q))},
		zero = (wire_altpriority_encoder30_zero & wire_altpriority_encoder31_zero);
endmodule //AlteraAdder_altpriority_encoder123456789101112


//altpriority_encoder LSB_PRIORITY="YES" PIPELINE=0 WIDTH=32 WIDTHAD=5 data q
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END


//altpriority_encoder LSB_PRIORITY="YES" WIDTH=16 WIDTHAD=4 data q
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END


//altpriority_encoder LSB_PRIORITY="YES" WIDTH=8 WIDTHAD=3 data q
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END


//altpriority_encoder LSB_PRIORITY="YES" WIDTH=4 WIDTHAD=2 data q
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END


//altpriority_encoder LSB_PRIORITY="YES" WIDTH=2 WIDTHAD=1 data q
//VERSION_BEGIN 18.1 cbx_altpriority_encoder 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder123456789101112131415161718192021
	( 
	data,
	q) /* synthesis synthesis_clearbox=1 */;
	input   [1:0]  data;
	output   [0:0]  q;


	assign
		q = {(~ data[0])};
endmodule //AlteraAdder_altpriority_encoder123456789101112131415161718192021

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder1234567891011121314151617181920
	( 
	data,
	q) /* synthesis synthesis_clearbox=1 */;
	input   [3:0]  data;
	output   [1:0]  q;

	wire  [0:0]   wire_altpriority_encoder44_q;
	wire  wire_altpriority_encoder44_zero;
	wire  [0:0]   wire_altpriority_encoder45_q;

	AlteraAdder_altpriority_encoder12345678910111213141516   altpriority_encoder44
	( 
	.data(data[1:0]),
	.q(wire_altpriority_encoder44_q),
	.zero(wire_altpriority_encoder44_zero));
	AlteraAdder_altpriority_encoder123456789101112131415161718192021   altpriority_encoder45
	( 
	.data(data[3:2]),
	.q(wire_altpriority_encoder45_q));
	assign
		q = {wire_altpriority_encoder44_zero, ((wire_altpriority_encoder44_zero & wire_altpriority_encoder45_q) | ((~ wire_altpriority_encoder44_zero) & wire_altpriority_encoder44_q))};
endmodule //AlteraAdder_altpriority_encoder1234567891011121314151617181920

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder12345678910111213141516171819
	( 
	data,
	q) /* synthesis synthesis_clearbox=1 */;
	input   [7:0]  data;
	output   [2:0]  q;

	wire  [1:0]   wire_altpriority_encoder42_q;
	wire  wire_altpriority_encoder42_zero;
	wire  [1:0]   wire_altpriority_encoder43_q;

	AlteraAdder_altpriority_encoder123456789101112131415   altpriority_encoder42
	( 
	.data(data[3:0]),
	.q(wire_altpriority_encoder42_q),
	.zero(wire_altpriority_encoder42_zero));
	AlteraAdder_altpriority_encoder1234567891011121314151617181920   altpriority_encoder43
	( 
	.data(data[7:4]),
	.q(wire_altpriority_encoder43_q));
	assign
		q = {wire_altpriority_encoder42_zero, (({2{wire_altpriority_encoder42_zero}} & wire_altpriority_encoder43_q) | ({2{(~ wire_altpriority_encoder42_zero)}} & wire_altpriority_encoder42_q))};
endmodule //AlteraAdder_altpriority_encoder12345678910111213141516171819

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder123456789101112131415161718
	( 
	data,
	q) /* synthesis synthesis_clearbox=1 */;
	input   [15:0]  data;
	output   [3:0]  q;

	wire  [2:0]   wire_altpriority_encoder40_q;
	wire  wire_altpriority_encoder40_zero;
	wire  [2:0]   wire_altpriority_encoder41_q;

	AlteraAdder_altpriority_encoder1234567891011121314   altpriority_encoder40
	( 
	.data(data[7:0]),
	.q(wire_altpriority_encoder40_q),
	.zero(wire_altpriority_encoder40_zero));
	AlteraAdder_altpriority_encoder12345678910111213141516171819   altpriority_encoder41
	( 
	.data(data[15:8]),
	.q(wire_altpriority_encoder41_q));
	assign
		q = {wire_altpriority_encoder40_zero, (({3{wire_altpriority_encoder40_zero}} & wire_altpriority_encoder41_q) | ({3{(~ wire_altpriority_encoder40_zero)}} & wire_altpriority_encoder40_q))};
endmodule //AlteraAdder_altpriority_encoder123456789101112131415161718

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder1234567891011121314151617
	( 
	data,
	q) /* synthesis synthesis_clearbox=1 */;
	input   [31:0]  data;
	output   [4:0]  q;

	wire  [3:0]   wire_altpriority_encoder38_q;
	wire  wire_altpriority_encoder38_zero;
	wire  [3:0]   wire_altpriority_encoder39_q;

	AlteraAdder_altpriority_encoder12345678910111213   altpriority_encoder38
	( 
	.data(data[15:0]),
	.q(wire_altpriority_encoder38_q),
	.zero(wire_altpriority_encoder38_zero));
	AlteraAdder_altpriority_encoder123456789101112131415161718   altpriority_encoder39
	( 
	.data(data[31:16]),
	.q(wire_altpriority_encoder39_q));
	assign
		q = {wire_altpriority_encoder38_zero, (({4{wire_altpriority_encoder38_zero}} & wire_altpriority_encoder39_q) | ({4{(~ wire_altpriority_encoder38_zero)}} & wire_altpriority_encoder38_q))};
endmodule //AlteraAdder_altpriority_encoder1234567891011121314151617

//synthesis_resources = reg 6 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altpriority_encoder1234567891011
	( 
	aclr,
	clk_en,
	clock,
	data,
	q) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clk_en;
	input   clock;
	input   [63:0]  data;
	output   [5:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clk_en;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [4:0]   wire_altpriority_encoder28_q;
	wire  wire_altpriority_encoder28_zero;
	wire  [4:0]   wire_altpriority_encoder29_q;
	reg	[5:0]	pipeline_q_dffe;
	wire  [5:0]  tmp_q_wire;

	AlteraAdder_altpriority_encoder123456789101112   altpriority_encoder28
	( 
	.data(data[31:0]),
	.q(wire_altpriority_encoder28_q),
	.zero(wire_altpriority_encoder28_zero));
	AlteraAdder_altpriority_encoder1234567891011121314151617   altpriority_encoder29
	( 
	.data(data[63:32]),
	.q(wire_altpriority_encoder29_q));
	// synopsys translate_off
	initial
		pipeline_q_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) pipeline_q_dffe <= 6'b0;
		else if  (clk_en == 1'b1)   pipeline_q_dffe <= (~ tmp_q_wire);
	assign
		q = (~ pipeline_q_dffe),
		tmp_q_wire = {wire_altpriority_encoder28_zero, (({5{wire_altpriority_encoder28_zero}} & wire_altpriority_encoder29_q) | ({5{(~ wire_altpriority_encoder28_zero)}} & wire_altpriority_encoder28_q))};
endmodule //AlteraAdder_altpriority_encoder1234567891011


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_PIPELINE=1 LPM_REPRESENTATION="SIGNED" LPM_WIDTH=12 aclr clken clock dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_PIPELINE=1 LPM_REPRESENTATION="SIGNED" LPM_WIDTH=12 aclr clken clock dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_REPRESENTATION="SIGNED" LPM_WIDTH=7 dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_PIPELINE=1 LPM_REPRESENTATION="SIGNED" LPM_WIDTH=57 aclr add_sub cin clken clock dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = lut 59 reg 57 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_add_sub
	( 
	aclr,
	add_sub,
	cin,
	clken,
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   add_sub;
	input   cin;
	input   clken;
	input   clock;
	input   [56:0]  dataa;
	input   [56:0]  datab;
	output   [56:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   add_sub;
	tri1   clken;
	tri0   clock;
	tri0   [56:0]  dataa;
	tri0   [56:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	dffe100;
	reg	dffe101;
	reg	dffe102;
	reg	dffe46;
	reg	dffe47;
	reg	dffe48;
	reg	dffe49;
	reg	dffe50;
	reg	dffe51;
	reg	dffe52;
	reg	dffe53;
	reg	dffe54;
	reg	dffe55;
	reg	dffe56;
	reg	dffe57;
	reg	dffe58;
	reg	dffe59;
	reg	dffe60;
	reg	dffe61;
	reg	dffe62;
	reg	dffe63;
	reg	dffe64;
	reg	dffe65;
	reg	dffe66;
	reg	dffe67;
	reg	dffe68;
	reg	dffe69;
	reg	dffe70;
	reg	dffe71;
	reg	dffe72;
	reg	dffe73;
	reg	dffe74;
	reg	dffe75;
	reg	dffe76;
	reg	dffe77;
	reg	dffe78;
	reg	dffe79;
	reg	dffe80;
	reg	dffe81;
	reg	dffe82;
	reg	dffe83;
	reg	dffe84;
	reg	dffe85;
	reg	dffe86;
	reg	dffe87;
	reg	dffe88;
	reg	dffe89;
	reg	dffe90;
	reg	dffe91;
	reg	dffe92;
	reg	dffe93;
	reg	dffe94;
	reg	dffe95;
	reg	dffe96;
	reg	dffe97;
	reg	dffe98;
	reg	dffe99;
	wire  [0:0]   wire_add_sub_buf_ina_0sumout;
	wire  [0:0]   wire_add_sub_buf_outa_0cout;
	wire  [0:0]   wire_add_sub_cella_0cout;
	wire  [0:0]   wire_add_sub_cella_1cout;
	wire  [0:0]   wire_add_sub_cella_2cout;
	wire  [0:0]   wire_add_sub_cella_3cout;
	wire  [0:0]   wire_add_sub_cella_4cout;
	wire  [0:0]   wire_add_sub_cella_5cout;
	wire  [0:0]   wire_add_sub_cella_6cout;
	wire  [0:0]   wire_add_sub_cella_7cout;
	wire  [0:0]   wire_add_sub_cella_8cout;
	wire  [0:0]   wire_add_sub_cella_9cout;
	wire  [0:0]   wire_add_sub_cella_10cout;
	wire  [0:0]   wire_add_sub_cella_11cout;
	wire  [0:0]   wire_add_sub_cella_12cout;
	wire  [0:0]   wire_add_sub_cella_13cout;
	wire  [0:0]   wire_add_sub_cella_14cout;
	wire  [0:0]   wire_add_sub_cella_15cout;
	wire  [0:0]   wire_add_sub_cella_16cout;
	wire  [0:0]   wire_add_sub_cella_17cout;
	wire  [0:0]   wire_add_sub_cella_18cout;
	wire  [0:0]   wire_add_sub_cella_19cout;
	wire  [0:0]   wire_add_sub_cella_20cout;
	wire  [0:0]   wire_add_sub_cella_21cout;
	wire  [0:0]   wire_add_sub_cella_22cout;
	wire  [0:0]   wire_add_sub_cella_23cout;
	wire  [0:0]   wire_add_sub_cella_24cout;
	wire  [0:0]   wire_add_sub_cella_25cout;
	wire  [0:0]   wire_add_sub_cella_26cout;
	wire  [0:0]   wire_add_sub_cella_27cout;
	wire  [0:0]   wire_add_sub_cella_28cout;
	wire  [0:0]   wire_add_sub_cella_29cout;
	wire  [0:0]   wire_add_sub_cella_30cout;
	wire  [0:0]   wire_add_sub_cella_31cout;
	wire  [0:0]   wire_add_sub_cella_32cout;
	wire  [0:0]   wire_add_sub_cella_33cout;
	wire  [0:0]   wire_add_sub_cella_34cout;
	wire  [0:0]   wire_add_sub_cella_35cout;
	wire  [0:0]   wire_add_sub_cella_36cout;
	wire  [0:0]   wire_add_sub_cella_37cout;
	wire  [0:0]   wire_add_sub_cella_38cout;
	wire  [0:0]   wire_add_sub_cella_39cout;
	wire  [0:0]   wire_add_sub_cella_40cout;
	wire  [0:0]   wire_add_sub_cella_41cout;
	wire  [0:0]   wire_add_sub_cella_42cout;
	wire  [0:0]   wire_add_sub_cella_43cout;
	wire  [0:0]   wire_add_sub_cella_44cout;
	wire  [0:0]   wire_add_sub_cella_45cout;
	wire  [0:0]   wire_add_sub_cella_46cout;
	wire  [0:0]   wire_add_sub_cella_47cout;
	wire  [0:0]   wire_add_sub_cella_48cout;
	wire  [0:0]   wire_add_sub_cella_49cout;
	wire  [0:0]   wire_add_sub_cella_50cout;
	wire  [0:0]   wire_add_sub_cella_51cout;
	wire  [0:0]   wire_add_sub_cella_52cout;
	wire  [0:0]   wire_add_sub_cella_53cout;
	wire  [0:0]   wire_add_sub_cella_54cout;
	wire  [0:0]   wire_add_sub_cella_55cout;
	wire  [56:0]   wire_add_sub_cella_datad;
	wire  [56:0]   wire_add_sub_cella_dataf;
	wire  [0:0]   wire_add_sub_cella_0sumout;
	wire  [0:0]   wire_add_sub_cella_1sumout;
	wire  [0:0]   wire_add_sub_cella_2sumout;
	wire  [0:0]   wire_add_sub_cella_3sumout;
	wire  [0:0]   wire_add_sub_cella_4sumout;
	wire  [0:0]   wire_add_sub_cella_5sumout;
	wire  [0:0]   wire_add_sub_cella_6sumout;
	wire  [0:0]   wire_add_sub_cella_7sumout;
	wire  [0:0]   wire_add_sub_cella_8sumout;
	wire  [0:0]   wire_add_sub_cella_9sumout;
	wire  [0:0]   wire_add_sub_cella_10sumout;
	wire  [0:0]   wire_add_sub_cella_11sumout;
	wire  [0:0]   wire_add_sub_cella_12sumout;
	wire  [0:0]   wire_add_sub_cella_13sumout;
	wire  [0:0]   wire_add_sub_cella_14sumout;
	wire  [0:0]   wire_add_sub_cella_15sumout;
	wire  [0:0]   wire_add_sub_cella_16sumout;
	wire  [0:0]   wire_add_sub_cella_17sumout;
	wire  [0:0]   wire_add_sub_cella_18sumout;
	wire  [0:0]   wire_add_sub_cella_19sumout;
	wire  [0:0]   wire_add_sub_cella_20sumout;
	wire  [0:0]   wire_add_sub_cella_21sumout;
	wire  [0:0]   wire_add_sub_cella_22sumout;
	wire  [0:0]   wire_add_sub_cella_23sumout;
	wire  [0:0]   wire_add_sub_cella_24sumout;
	wire  [0:0]   wire_add_sub_cella_25sumout;
	wire  [0:0]   wire_add_sub_cella_26sumout;
	wire  [0:0]   wire_add_sub_cella_27sumout;
	wire  [0:0]   wire_add_sub_cella_28sumout;
	wire  [0:0]   wire_add_sub_cella_29sumout;
	wire  [0:0]   wire_add_sub_cella_30sumout;
	wire  [0:0]   wire_add_sub_cella_31sumout;
	wire  [0:0]   wire_add_sub_cella_32sumout;
	wire  [0:0]   wire_add_sub_cella_33sumout;
	wire  [0:0]   wire_add_sub_cella_34sumout;
	wire  [0:0]   wire_add_sub_cella_35sumout;
	wire  [0:0]   wire_add_sub_cella_36sumout;
	wire  [0:0]   wire_add_sub_cella_37sumout;
	wire  [0:0]   wire_add_sub_cella_38sumout;
	wire  [0:0]   wire_add_sub_cella_39sumout;
	wire  [0:0]   wire_add_sub_cella_40sumout;
	wire  [0:0]   wire_add_sub_cella_41sumout;
	wire  [0:0]   wire_add_sub_cella_42sumout;
	wire  [0:0]   wire_add_sub_cella_43sumout;
	wire  [0:0]   wire_add_sub_cella_44sumout;
	wire  [0:0]   wire_add_sub_cella_45sumout;
	wire  [0:0]   wire_add_sub_cella_46sumout;
	wire  [0:0]   wire_add_sub_cella_47sumout;
	wire  [0:0]   wire_add_sub_cella_48sumout;
	wire  [0:0]   wire_add_sub_cella_49sumout;
	wire  [0:0]   wire_add_sub_cella_50sumout;
	wire  [0:0]   wire_add_sub_cella_51sumout;
	wire  [0:0]   wire_add_sub_cella_52sumout;
	wire  [0:0]   wire_add_sub_cella_53sumout;
	wire  [0:0]   wire_add_sub_cella_54sumout;
	wire  [0:0]   wire_add_sub_cella_55sumout;
	wire  [0:0]   wire_add_sub_cella_56sumout;
	wire  [0:0]  lsb_cin_wire;

	// synopsys translate_off
	initial
		dffe100 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe100 <= 1'b0;
		else if  (clken == 1'b1)   dffe100 <= wire_add_sub_cella_54sumout[0:0];
	// synopsys translate_off
	initial
		dffe101 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe101 <= 1'b0;
		else if  (clken == 1'b1)   dffe101 <= wire_add_sub_cella_55sumout[0:0];
	// synopsys translate_off
	initial
		dffe102 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe102 <= 1'b0;
		else if  (clken == 1'b1)   dffe102 <= wire_add_sub_cella_56sumout[0:0];
	// synopsys translate_off
	initial
		dffe46 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe46 <= 1'b0;
		else if  (clken == 1'b1)   dffe46 <= wire_add_sub_cella_0sumout[0:0];
	// synopsys translate_off
	initial
		dffe47 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe47 <= 1'b0;
		else if  (clken == 1'b1)   dffe47 <= wire_add_sub_cella_1sumout[0:0];
	// synopsys translate_off
	initial
		dffe48 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe48 <= 1'b0;
		else if  (clken == 1'b1)   dffe48 <= wire_add_sub_cella_2sumout[0:0];
	// synopsys translate_off
	initial
		dffe49 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe49 <= 1'b0;
		else if  (clken == 1'b1)   dffe49 <= wire_add_sub_cella_3sumout[0:0];
	// synopsys translate_off
	initial
		dffe50 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe50 <= 1'b0;
		else if  (clken == 1'b1)   dffe50 <= wire_add_sub_cella_4sumout[0:0];
	// synopsys translate_off
	initial
		dffe51 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe51 <= 1'b0;
		else if  (clken == 1'b1)   dffe51 <= wire_add_sub_cella_5sumout[0:0];
	// synopsys translate_off
	initial
		dffe52 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe52 <= 1'b0;
		else if  (clken == 1'b1)   dffe52 <= wire_add_sub_cella_6sumout[0:0];
	// synopsys translate_off
	initial
		dffe53 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe53 <= 1'b0;
		else if  (clken == 1'b1)   dffe53 <= wire_add_sub_cella_7sumout[0:0];
	// synopsys translate_off
	initial
		dffe54 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe54 <= 1'b0;
		else if  (clken == 1'b1)   dffe54 <= wire_add_sub_cella_8sumout[0:0];
	// synopsys translate_off
	initial
		dffe55 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe55 <= 1'b0;
		else if  (clken == 1'b1)   dffe55 <= wire_add_sub_cella_9sumout[0:0];
	// synopsys translate_off
	initial
		dffe56 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe56 <= 1'b0;
		else if  (clken == 1'b1)   dffe56 <= wire_add_sub_cella_10sumout[0:0];
	// synopsys translate_off
	initial
		dffe57 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe57 <= 1'b0;
		else if  (clken == 1'b1)   dffe57 <= wire_add_sub_cella_11sumout[0:0];
	// synopsys translate_off
	initial
		dffe58 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe58 <= 1'b0;
		else if  (clken == 1'b1)   dffe58 <= wire_add_sub_cella_12sumout[0:0];
	// synopsys translate_off
	initial
		dffe59 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe59 <= 1'b0;
		else if  (clken == 1'b1)   dffe59 <= wire_add_sub_cella_13sumout[0:0];
	// synopsys translate_off
	initial
		dffe60 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe60 <= 1'b0;
		else if  (clken == 1'b1)   dffe60 <= wire_add_sub_cella_14sumout[0:0];
	// synopsys translate_off
	initial
		dffe61 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe61 <= 1'b0;
		else if  (clken == 1'b1)   dffe61 <= wire_add_sub_cella_15sumout[0:0];
	// synopsys translate_off
	initial
		dffe62 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe62 <= 1'b0;
		else if  (clken == 1'b1)   dffe62 <= wire_add_sub_cella_16sumout[0:0];
	// synopsys translate_off
	initial
		dffe63 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe63 <= 1'b0;
		else if  (clken == 1'b1)   dffe63 <= wire_add_sub_cella_17sumout[0:0];
	// synopsys translate_off
	initial
		dffe64 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe64 <= 1'b0;
		else if  (clken == 1'b1)   dffe64 <= wire_add_sub_cella_18sumout[0:0];
	// synopsys translate_off
	initial
		dffe65 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe65 <= 1'b0;
		else if  (clken == 1'b1)   dffe65 <= wire_add_sub_cella_19sumout[0:0];
	// synopsys translate_off
	initial
		dffe66 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe66 <= 1'b0;
		else if  (clken == 1'b1)   dffe66 <= wire_add_sub_cella_20sumout[0:0];
	// synopsys translate_off
	initial
		dffe67 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe67 <= 1'b0;
		else if  (clken == 1'b1)   dffe67 <= wire_add_sub_cella_21sumout[0:0];
	// synopsys translate_off
	initial
		dffe68 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe68 <= 1'b0;
		else if  (clken == 1'b1)   dffe68 <= wire_add_sub_cella_22sumout[0:0];
	// synopsys translate_off
	initial
		dffe69 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe69 <= 1'b0;
		else if  (clken == 1'b1)   dffe69 <= wire_add_sub_cella_23sumout[0:0];
	// synopsys translate_off
	initial
		dffe70 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe70 <= 1'b0;
		else if  (clken == 1'b1)   dffe70 <= wire_add_sub_cella_24sumout[0:0];
	// synopsys translate_off
	initial
		dffe71 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe71 <= 1'b0;
		else if  (clken == 1'b1)   dffe71 <= wire_add_sub_cella_25sumout[0:0];
	// synopsys translate_off
	initial
		dffe72 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe72 <= 1'b0;
		else if  (clken == 1'b1)   dffe72 <= wire_add_sub_cella_26sumout[0:0];
	// synopsys translate_off
	initial
		dffe73 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe73 <= 1'b0;
		else if  (clken == 1'b1)   dffe73 <= wire_add_sub_cella_27sumout[0:0];
	// synopsys translate_off
	initial
		dffe74 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe74 <= 1'b0;
		else if  (clken == 1'b1)   dffe74 <= wire_add_sub_cella_28sumout[0:0];
	// synopsys translate_off
	initial
		dffe75 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe75 <= 1'b0;
		else if  (clken == 1'b1)   dffe75 <= wire_add_sub_cella_29sumout[0:0];
	// synopsys translate_off
	initial
		dffe76 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe76 <= 1'b0;
		else if  (clken == 1'b1)   dffe76 <= wire_add_sub_cella_30sumout[0:0];
	// synopsys translate_off
	initial
		dffe77 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe77 <= 1'b0;
		else if  (clken == 1'b1)   dffe77 <= wire_add_sub_cella_31sumout[0:0];
	// synopsys translate_off
	initial
		dffe78 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe78 <= 1'b0;
		else if  (clken == 1'b1)   dffe78 <= wire_add_sub_cella_32sumout[0:0];
	// synopsys translate_off
	initial
		dffe79 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe79 <= 1'b0;
		else if  (clken == 1'b1)   dffe79 <= wire_add_sub_cella_33sumout[0:0];
	// synopsys translate_off
	initial
		dffe80 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe80 <= 1'b0;
		else if  (clken == 1'b1)   dffe80 <= wire_add_sub_cella_34sumout[0:0];
	// synopsys translate_off
	initial
		dffe81 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe81 <= 1'b0;
		else if  (clken == 1'b1)   dffe81 <= wire_add_sub_cella_35sumout[0:0];
	// synopsys translate_off
	initial
		dffe82 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe82 <= 1'b0;
		else if  (clken == 1'b1)   dffe82 <= wire_add_sub_cella_36sumout[0:0];
	// synopsys translate_off
	initial
		dffe83 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe83 <= 1'b0;
		else if  (clken == 1'b1)   dffe83 <= wire_add_sub_cella_37sumout[0:0];
	// synopsys translate_off
	initial
		dffe84 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe84 <= 1'b0;
		else if  (clken == 1'b1)   dffe84 <= wire_add_sub_cella_38sumout[0:0];
	// synopsys translate_off
	initial
		dffe85 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe85 <= 1'b0;
		else if  (clken == 1'b1)   dffe85 <= wire_add_sub_cella_39sumout[0:0];
	// synopsys translate_off
	initial
		dffe86 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe86 <= 1'b0;
		else if  (clken == 1'b1)   dffe86 <= wire_add_sub_cella_40sumout[0:0];
	// synopsys translate_off
	initial
		dffe87 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe87 <= 1'b0;
		else if  (clken == 1'b1)   dffe87 <= wire_add_sub_cella_41sumout[0:0];
	// synopsys translate_off
	initial
		dffe88 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe88 <= 1'b0;
		else if  (clken == 1'b1)   dffe88 <= wire_add_sub_cella_42sumout[0:0];
	// synopsys translate_off
	initial
		dffe89 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe89 <= 1'b0;
		else if  (clken == 1'b1)   dffe89 <= wire_add_sub_cella_43sumout[0:0];
	// synopsys translate_off
	initial
		dffe90 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe90 <= 1'b0;
		else if  (clken == 1'b1)   dffe90 <= wire_add_sub_cella_44sumout[0:0];
	// synopsys translate_off
	initial
		dffe91 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe91 <= 1'b0;
		else if  (clken == 1'b1)   dffe91 <= wire_add_sub_cella_45sumout[0:0];
	// synopsys translate_off
	initial
		dffe92 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe92 <= 1'b0;
		else if  (clken == 1'b1)   dffe92 <= wire_add_sub_cella_46sumout[0:0];
	// synopsys translate_off
	initial
		dffe93 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe93 <= 1'b0;
		else if  (clken == 1'b1)   dffe93 <= wire_add_sub_cella_47sumout[0:0];
	// synopsys translate_off
	initial
		dffe94 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe94 <= 1'b0;
		else if  (clken == 1'b1)   dffe94 <= wire_add_sub_cella_48sumout[0:0];
	// synopsys translate_off
	initial
		dffe95 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe95 <= 1'b0;
		else if  (clken == 1'b1)   dffe95 <= wire_add_sub_cella_49sumout[0:0];
	// synopsys translate_off
	initial
		dffe96 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe96 <= 1'b0;
		else if  (clken == 1'b1)   dffe96 <= wire_add_sub_cella_50sumout[0:0];
	// synopsys translate_off
	initial
		dffe97 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe97 <= 1'b0;
		else if  (clken == 1'b1)   dffe97 <= wire_add_sub_cella_51sumout[0:0];
	// synopsys translate_off
	initial
		dffe98 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe98 <= 1'b0;
		else if  (clken == 1'b1)   dffe98 <= wire_add_sub_cella_52sumout[0:0];
	// synopsys translate_off
	initial
		dffe99 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dffe99 <= 1'b0;
		else if  (clken == 1'b1)   dffe99 <= wire_add_sub_cella_53sumout[0:0];
	cyclonev_lcell_comb   add_sub_buf_ina_0
	( 
	.cin(wire_add_sub_cella_31cout[0:0]),
	.combout(),
	.cout(),
	.dataa(1'b1),
	.shareout(),
	.sumout(wire_add_sub_buf_ina_0sumout[0:0]),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_buf_ina_0.extended_lut = "off",
		add_sub_buf_ina_0.lut_mask = 64'h0000AAAA00005555,
		add_sub_buf_ina_0.shared_arith = "off",
		add_sub_buf_ina_0.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_buf_outa_0
	( 
	.cin(1'b0),
	.combout(),
	.cout(wire_add_sub_buf_outa_0cout[0:0]),
	.dataa(wire_add_sub_buf_ina_0sumout),
	.shareout(),
	.sumout(),
	.datab(1'b0),
	.datac(1'b0),
	.datad(1'b0),
	.datae(1'b0),
	.dataf(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_buf_outa_0.extended_lut = "off",
		add_sub_buf_outa_0.lut_mask = 64'h000055550000AAAA,
		add_sub_buf_outa_0.shared_arith = "off",
		add_sub_buf_outa_0.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_0
	( 
	.cin(lsb_cin_wire),
	.combout(),
	.cout(wire_add_sub_cella_0cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[0:0]),
	.dataf(wire_add_sub_cella_dataf[0:0]),
	.shareout(),
	.sumout(wire_add_sub_cella_0sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_0.extended_lut = "off",
		add_sub_cella_0.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_0.shared_arith = "off",
		add_sub_cella_0.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_1
	( 
	.cin(wire_add_sub_cella_0cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_1cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[1:1]),
	.dataf(wire_add_sub_cella_dataf[1:1]),
	.shareout(),
	.sumout(wire_add_sub_cella_1sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_1.extended_lut = "off",
		add_sub_cella_1.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_1.shared_arith = "off",
		add_sub_cella_1.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_2
	( 
	.cin(wire_add_sub_cella_1cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_2cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[2:2]),
	.dataf(wire_add_sub_cella_dataf[2:2]),
	.shareout(),
	.sumout(wire_add_sub_cella_2sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_2.extended_lut = "off",
		add_sub_cella_2.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_2.shared_arith = "off",
		add_sub_cella_2.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_3
	( 
	.cin(wire_add_sub_cella_2cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_3cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[3:3]),
	.dataf(wire_add_sub_cella_dataf[3:3]),
	.shareout(),
	.sumout(wire_add_sub_cella_3sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_3.extended_lut = "off",
		add_sub_cella_3.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_3.shared_arith = "off",
		add_sub_cella_3.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_4
	( 
	.cin(wire_add_sub_cella_3cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_4cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[4:4]),
	.dataf(wire_add_sub_cella_dataf[4:4]),
	.shareout(),
	.sumout(wire_add_sub_cella_4sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_4.extended_lut = "off",
		add_sub_cella_4.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_4.shared_arith = "off",
		add_sub_cella_4.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_5
	( 
	.cin(wire_add_sub_cella_4cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_5cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[5:5]),
	.dataf(wire_add_sub_cella_dataf[5:5]),
	.shareout(),
	.sumout(wire_add_sub_cella_5sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_5.extended_lut = "off",
		add_sub_cella_5.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_5.shared_arith = "off",
		add_sub_cella_5.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_6
	( 
	.cin(wire_add_sub_cella_5cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_6cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[6:6]),
	.dataf(wire_add_sub_cella_dataf[6:6]),
	.shareout(),
	.sumout(wire_add_sub_cella_6sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_6.extended_lut = "off",
		add_sub_cella_6.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_6.shared_arith = "off",
		add_sub_cella_6.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_7
	( 
	.cin(wire_add_sub_cella_6cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_7cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[7:7]),
	.dataf(wire_add_sub_cella_dataf[7:7]),
	.shareout(),
	.sumout(wire_add_sub_cella_7sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_7.extended_lut = "off",
		add_sub_cella_7.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_7.shared_arith = "off",
		add_sub_cella_7.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_8
	( 
	.cin(wire_add_sub_cella_7cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_8cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[8:8]),
	.dataf(wire_add_sub_cella_dataf[8:8]),
	.shareout(),
	.sumout(wire_add_sub_cella_8sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_8.extended_lut = "off",
		add_sub_cella_8.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_8.shared_arith = "off",
		add_sub_cella_8.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_9
	( 
	.cin(wire_add_sub_cella_8cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_9cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[9:9]),
	.dataf(wire_add_sub_cella_dataf[9:9]),
	.shareout(),
	.sumout(wire_add_sub_cella_9sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_9.extended_lut = "off",
		add_sub_cella_9.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_9.shared_arith = "off",
		add_sub_cella_9.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_10
	( 
	.cin(wire_add_sub_cella_9cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_10cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[10:10]),
	.dataf(wire_add_sub_cella_dataf[10:10]),
	.shareout(),
	.sumout(wire_add_sub_cella_10sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_10.extended_lut = "off",
		add_sub_cella_10.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_10.shared_arith = "off",
		add_sub_cella_10.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_11
	( 
	.cin(wire_add_sub_cella_10cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_11cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[11:11]),
	.dataf(wire_add_sub_cella_dataf[11:11]),
	.shareout(),
	.sumout(wire_add_sub_cella_11sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_11.extended_lut = "off",
		add_sub_cella_11.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_11.shared_arith = "off",
		add_sub_cella_11.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_12
	( 
	.cin(wire_add_sub_cella_11cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_12cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[12:12]),
	.dataf(wire_add_sub_cella_dataf[12:12]),
	.shareout(),
	.sumout(wire_add_sub_cella_12sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_12.extended_lut = "off",
		add_sub_cella_12.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_12.shared_arith = "off",
		add_sub_cella_12.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_13
	( 
	.cin(wire_add_sub_cella_12cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_13cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[13:13]),
	.dataf(wire_add_sub_cella_dataf[13:13]),
	.shareout(),
	.sumout(wire_add_sub_cella_13sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_13.extended_lut = "off",
		add_sub_cella_13.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_13.shared_arith = "off",
		add_sub_cella_13.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_14
	( 
	.cin(wire_add_sub_cella_13cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_14cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[14:14]),
	.dataf(wire_add_sub_cella_dataf[14:14]),
	.shareout(),
	.sumout(wire_add_sub_cella_14sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_14.extended_lut = "off",
		add_sub_cella_14.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_14.shared_arith = "off",
		add_sub_cella_14.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_15
	( 
	.cin(wire_add_sub_cella_14cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_15cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[15:15]),
	.dataf(wire_add_sub_cella_dataf[15:15]),
	.shareout(),
	.sumout(wire_add_sub_cella_15sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_15.extended_lut = "off",
		add_sub_cella_15.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_15.shared_arith = "off",
		add_sub_cella_15.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_16
	( 
	.cin(wire_add_sub_cella_15cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_16cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[16:16]),
	.dataf(wire_add_sub_cella_dataf[16:16]),
	.shareout(),
	.sumout(wire_add_sub_cella_16sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_16.extended_lut = "off",
		add_sub_cella_16.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_16.shared_arith = "off",
		add_sub_cella_16.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_17
	( 
	.cin(wire_add_sub_cella_16cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_17cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[17:17]),
	.dataf(wire_add_sub_cella_dataf[17:17]),
	.shareout(),
	.sumout(wire_add_sub_cella_17sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_17.extended_lut = "off",
		add_sub_cella_17.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_17.shared_arith = "off",
		add_sub_cella_17.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_18
	( 
	.cin(wire_add_sub_cella_17cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_18cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[18:18]),
	.dataf(wire_add_sub_cella_dataf[18:18]),
	.shareout(),
	.sumout(wire_add_sub_cella_18sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_18.extended_lut = "off",
		add_sub_cella_18.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_18.shared_arith = "off",
		add_sub_cella_18.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_19
	( 
	.cin(wire_add_sub_cella_18cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_19cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[19:19]),
	.dataf(wire_add_sub_cella_dataf[19:19]),
	.shareout(),
	.sumout(wire_add_sub_cella_19sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_19.extended_lut = "off",
		add_sub_cella_19.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_19.shared_arith = "off",
		add_sub_cella_19.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_20
	( 
	.cin(wire_add_sub_cella_19cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_20cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[20:20]),
	.dataf(wire_add_sub_cella_dataf[20:20]),
	.shareout(),
	.sumout(wire_add_sub_cella_20sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_20.extended_lut = "off",
		add_sub_cella_20.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_20.shared_arith = "off",
		add_sub_cella_20.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_21
	( 
	.cin(wire_add_sub_cella_20cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_21cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[21:21]),
	.dataf(wire_add_sub_cella_dataf[21:21]),
	.shareout(),
	.sumout(wire_add_sub_cella_21sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_21.extended_lut = "off",
		add_sub_cella_21.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_21.shared_arith = "off",
		add_sub_cella_21.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_22
	( 
	.cin(wire_add_sub_cella_21cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_22cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[22:22]),
	.dataf(wire_add_sub_cella_dataf[22:22]),
	.shareout(),
	.sumout(wire_add_sub_cella_22sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_22.extended_lut = "off",
		add_sub_cella_22.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_22.shared_arith = "off",
		add_sub_cella_22.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_23
	( 
	.cin(wire_add_sub_cella_22cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_23cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[23:23]),
	.dataf(wire_add_sub_cella_dataf[23:23]),
	.shareout(),
	.sumout(wire_add_sub_cella_23sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_23.extended_lut = "off",
		add_sub_cella_23.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_23.shared_arith = "off",
		add_sub_cella_23.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_24
	( 
	.cin(wire_add_sub_cella_23cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_24cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[24:24]),
	.dataf(wire_add_sub_cella_dataf[24:24]),
	.shareout(),
	.sumout(wire_add_sub_cella_24sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_24.extended_lut = "off",
		add_sub_cella_24.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_24.shared_arith = "off",
		add_sub_cella_24.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_25
	( 
	.cin(wire_add_sub_cella_24cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_25cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[25:25]),
	.dataf(wire_add_sub_cella_dataf[25:25]),
	.shareout(),
	.sumout(wire_add_sub_cella_25sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_25.extended_lut = "off",
		add_sub_cella_25.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_25.shared_arith = "off",
		add_sub_cella_25.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_26
	( 
	.cin(wire_add_sub_cella_25cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_26cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[26:26]),
	.dataf(wire_add_sub_cella_dataf[26:26]),
	.shareout(),
	.sumout(wire_add_sub_cella_26sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_26.extended_lut = "off",
		add_sub_cella_26.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_26.shared_arith = "off",
		add_sub_cella_26.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_27
	( 
	.cin(wire_add_sub_cella_26cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_27cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[27:27]),
	.dataf(wire_add_sub_cella_dataf[27:27]),
	.shareout(),
	.sumout(wire_add_sub_cella_27sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_27.extended_lut = "off",
		add_sub_cella_27.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_27.shared_arith = "off",
		add_sub_cella_27.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_28
	( 
	.cin(wire_add_sub_cella_27cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_28cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[28:28]),
	.dataf(wire_add_sub_cella_dataf[28:28]),
	.shareout(),
	.sumout(wire_add_sub_cella_28sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_28.extended_lut = "off",
		add_sub_cella_28.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_28.shared_arith = "off",
		add_sub_cella_28.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_29
	( 
	.cin(wire_add_sub_cella_28cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_29cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[29:29]),
	.dataf(wire_add_sub_cella_dataf[29:29]),
	.shareout(),
	.sumout(wire_add_sub_cella_29sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_29.extended_lut = "off",
		add_sub_cella_29.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_29.shared_arith = "off",
		add_sub_cella_29.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_30
	( 
	.cin(wire_add_sub_cella_29cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_30cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[30:30]),
	.dataf(wire_add_sub_cella_dataf[30:30]),
	.shareout(),
	.sumout(wire_add_sub_cella_30sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_30.extended_lut = "off",
		add_sub_cella_30.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_30.shared_arith = "off",
		add_sub_cella_30.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_31
	( 
	.cin(wire_add_sub_cella_30cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_31cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[31:31]),
	.dataf(wire_add_sub_cella_dataf[31:31]),
	.shareout(),
	.sumout(wire_add_sub_cella_31sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_31.extended_lut = "off",
		add_sub_cella_31.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_31.shared_arith = "off",
		add_sub_cella_31.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_32
	( 
	.cin(wire_add_sub_buf_outa_0cout),
	.combout(),
	.cout(wire_add_sub_cella_32cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[32:32]),
	.dataf(wire_add_sub_cella_dataf[32:32]),
	.shareout(),
	.sumout(wire_add_sub_cella_32sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_32.extended_lut = "off",
		add_sub_cella_32.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_32.shared_arith = "off",
		add_sub_cella_32.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_33
	( 
	.cin(wire_add_sub_cella_32cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_33cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[33:33]),
	.dataf(wire_add_sub_cella_dataf[33:33]),
	.shareout(),
	.sumout(wire_add_sub_cella_33sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_33.extended_lut = "off",
		add_sub_cella_33.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_33.shared_arith = "off",
		add_sub_cella_33.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_34
	( 
	.cin(wire_add_sub_cella_33cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_34cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[34:34]),
	.dataf(wire_add_sub_cella_dataf[34:34]),
	.shareout(),
	.sumout(wire_add_sub_cella_34sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_34.extended_lut = "off",
		add_sub_cella_34.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_34.shared_arith = "off",
		add_sub_cella_34.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_35
	( 
	.cin(wire_add_sub_cella_34cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_35cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[35:35]),
	.dataf(wire_add_sub_cella_dataf[35:35]),
	.shareout(),
	.sumout(wire_add_sub_cella_35sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_35.extended_lut = "off",
		add_sub_cella_35.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_35.shared_arith = "off",
		add_sub_cella_35.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_36
	( 
	.cin(wire_add_sub_cella_35cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_36cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[36:36]),
	.dataf(wire_add_sub_cella_dataf[36:36]),
	.shareout(),
	.sumout(wire_add_sub_cella_36sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_36.extended_lut = "off",
		add_sub_cella_36.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_36.shared_arith = "off",
		add_sub_cella_36.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_37
	( 
	.cin(wire_add_sub_cella_36cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_37cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[37:37]),
	.dataf(wire_add_sub_cella_dataf[37:37]),
	.shareout(),
	.sumout(wire_add_sub_cella_37sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_37.extended_lut = "off",
		add_sub_cella_37.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_37.shared_arith = "off",
		add_sub_cella_37.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_38
	( 
	.cin(wire_add_sub_cella_37cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_38cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[38:38]),
	.dataf(wire_add_sub_cella_dataf[38:38]),
	.shareout(),
	.sumout(wire_add_sub_cella_38sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_38.extended_lut = "off",
		add_sub_cella_38.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_38.shared_arith = "off",
		add_sub_cella_38.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_39
	( 
	.cin(wire_add_sub_cella_38cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_39cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[39:39]),
	.dataf(wire_add_sub_cella_dataf[39:39]),
	.shareout(),
	.sumout(wire_add_sub_cella_39sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_39.extended_lut = "off",
		add_sub_cella_39.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_39.shared_arith = "off",
		add_sub_cella_39.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_40
	( 
	.cin(wire_add_sub_cella_39cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_40cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[40:40]),
	.dataf(wire_add_sub_cella_dataf[40:40]),
	.shareout(),
	.sumout(wire_add_sub_cella_40sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_40.extended_lut = "off",
		add_sub_cella_40.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_40.shared_arith = "off",
		add_sub_cella_40.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_41
	( 
	.cin(wire_add_sub_cella_40cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_41cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[41:41]),
	.dataf(wire_add_sub_cella_dataf[41:41]),
	.shareout(),
	.sumout(wire_add_sub_cella_41sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_41.extended_lut = "off",
		add_sub_cella_41.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_41.shared_arith = "off",
		add_sub_cella_41.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_42
	( 
	.cin(wire_add_sub_cella_41cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_42cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[42:42]),
	.dataf(wire_add_sub_cella_dataf[42:42]),
	.shareout(),
	.sumout(wire_add_sub_cella_42sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_42.extended_lut = "off",
		add_sub_cella_42.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_42.shared_arith = "off",
		add_sub_cella_42.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_43
	( 
	.cin(wire_add_sub_cella_42cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_43cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[43:43]),
	.dataf(wire_add_sub_cella_dataf[43:43]),
	.shareout(),
	.sumout(wire_add_sub_cella_43sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_43.extended_lut = "off",
		add_sub_cella_43.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_43.shared_arith = "off",
		add_sub_cella_43.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_44
	( 
	.cin(wire_add_sub_cella_43cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_44cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[44:44]),
	.dataf(wire_add_sub_cella_dataf[44:44]),
	.shareout(),
	.sumout(wire_add_sub_cella_44sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_44.extended_lut = "off",
		add_sub_cella_44.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_44.shared_arith = "off",
		add_sub_cella_44.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_45
	( 
	.cin(wire_add_sub_cella_44cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_45cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[45:45]),
	.dataf(wire_add_sub_cella_dataf[45:45]),
	.shareout(),
	.sumout(wire_add_sub_cella_45sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_45.extended_lut = "off",
		add_sub_cella_45.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_45.shared_arith = "off",
		add_sub_cella_45.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_46
	( 
	.cin(wire_add_sub_cella_45cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_46cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[46:46]),
	.dataf(wire_add_sub_cella_dataf[46:46]),
	.shareout(),
	.sumout(wire_add_sub_cella_46sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_46.extended_lut = "off",
		add_sub_cella_46.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_46.shared_arith = "off",
		add_sub_cella_46.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_47
	( 
	.cin(wire_add_sub_cella_46cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_47cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[47:47]),
	.dataf(wire_add_sub_cella_dataf[47:47]),
	.shareout(),
	.sumout(wire_add_sub_cella_47sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_47.extended_lut = "off",
		add_sub_cella_47.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_47.shared_arith = "off",
		add_sub_cella_47.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_48
	( 
	.cin(wire_add_sub_cella_47cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_48cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[48:48]),
	.dataf(wire_add_sub_cella_dataf[48:48]),
	.shareout(),
	.sumout(wire_add_sub_cella_48sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_48.extended_lut = "off",
		add_sub_cella_48.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_48.shared_arith = "off",
		add_sub_cella_48.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_49
	( 
	.cin(wire_add_sub_cella_48cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_49cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[49:49]),
	.dataf(wire_add_sub_cella_dataf[49:49]),
	.shareout(),
	.sumout(wire_add_sub_cella_49sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_49.extended_lut = "off",
		add_sub_cella_49.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_49.shared_arith = "off",
		add_sub_cella_49.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_50
	( 
	.cin(wire_add_sub_cella_49cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_50cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[50:50]),
	.dataf(wire_add_sub_cella_dataf[50:50]),
	.shareout(),
	.sumout(wire_add_sub_cella_50sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_50.extended_lut = "off",
		add_sub_cella_50.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_50.shared_arith = "off",
		add_sub_cella_50.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_51
	( 
	.cin(wire_add_sub_cella_50cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_51cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[51:51]),
	.dataf(wire_add_sub_cella_dataf[51:51]),
	.shareout(),
	.sumout(wire_add_sub_cella_51sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_51.extended_lut = "off",
		add_sub_cella_51.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_51.shared_arith = "off",
		add_sub_cella_51.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_52
	( 
	.cin(wire_add_sub_cella_51cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_52cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[52:52]),
	.dataf(wire_add_sub_cella_dataf[52:52]),
	.shareout(),
	.sumout(wire_add_sub_cella_52sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_52.extended_lut = "off",
		add_sub_cella_52.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_52.shared_arith = "off",
		add_sub_cella_52.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_53
	( 
	.cin(wire_add_sub_cella_52cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_53cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[53:53]),
	.dataf(wire_add_sub_cella_dataf[53:53]),
	.shareout(),
	.sumout(wire_add_sub_cella_53sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_53.extended_lut = "off",
		add_sub_cella_53.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_53.shared_arith = "off",
		add_sub_cella_53.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_54
	( 
	.cin(wire_add_sub_cella_53cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_54cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[54:54]),
	.dataf(wire_add_sub_cella_dataf[54:54]),
	.shareout(),
	.sumout(wire_add_sub_cella_54sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_54.extended_lut = "off",
		add_sub_cella_54.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_54.shared_arith = "off",
		add_sub_cella_54.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_55
	( 
	.cin(wire_add_sub_cella_54cout[0:0]),
	.combout(),
	.cout(wire_add_sub_cella_55cout[0:0]),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[55:55]),
	.dataf(wire_add_sub_cella_dataf[55:55]),
	.shareout(),
	.sumout(wire_add_sub_cella_55sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_55.extended_lut = "off",
		add_sub_cella_55.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_55.shared_arith = "off",
		add_sub_cella_55.lpm_type = "cyclonev_lcell_comb";
	cyclonev_lcell_comb   add_sub_cella_56
	( 
	.cin(wire_add_sub_cella_55cout[0:0]),
	.combout(),
	.cout(),
	.datac(add_sub),
	.datad(wire_add_sub_cella_datad[56:56]),
	.dataf(wire_add_sub_cella_dataf[56:56]),
	.shareout(),
	.sumout(wire_add_sub_cella_56sumout[0:0]),
	.dataa(1'b0),
	.datab(1'b0),
	.datae(1'b0),
	.datag(1'b0),
	.sharein(1'b0)
	);
	defparam
		add_sub_cella_56.extended_lut = "off",
		add_sub_cella_56.lut_mask = 64'h00000FF00000FF00,
		add_sub_cella_56.shared_arith = "off",
		add_sub_cella_56.lpm_type = "cyclonev_lcell_comb";
	assign
		wire_add_sub_cella_datad = dataa,
		wire_add_sub_cella_dataf = datab;
	assign
		lsb_cin_wire = cin,
		result = {dffe102, dffe101, dffe100, dffe99, dffe98, dffe97, dffe96, dffe95, dffe94, dffe93, dffe92, dffe91, dffe90, dffe89, dffe88, dffe87, dffe86, dffe85, dffe84, dffe83, dffe82, dffe81, dffe80, dffe79, dffe78, dffe77, dffe76, dffe75, dffe74, dffe73, dffe72, dffe71, dffe70, dffe69, dffe68, dffe67, dffe66, dffe65, dffe64, dffe63, dffe62, dffe61, dffe60, dffe59, dffe58, dffe57, dffe56, dffe55, dffe54, dffe53, dffe52, dffe51, dffe50, dffe49, dffe48, dffe47, dffe46};
endmodule //AlteraAdder_add_sub


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_REPRESENTATION="SIGNED" LPM_WIDTH=12 dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_PIPELINE=1 LPM_REPRESENTATION="SIGNED" LPM_WIDTH=12 aclr clken clock dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_REPRESENTATION="SIGNED" LPM_WIDTH=55 dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="ADD" LPM_REPRESENTATION="SIGNED" LPM_WIDTH=12 dataa datab result
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


//lpm_compare DEVICE_FAMILY="Cyclone V" LPM_REPRESENTATION="SIGNED" LPM_WIDTH=7 agb dataa datab
//VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END

//synthesis_resources = lut 249 reg 1530 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  AlteraAdder_altfp_add_sub
	( 
	clock,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   [63:0]  dataa;
	input   [63:0]  datab;
	output   [63:0]  result;

	wire  [54:0]   wire_lbarrel_shift_result;
	wire  [54:0]   wire_rbarrel_shift_result;
	wire  [5:0]   wire_leading_zeroes_cnt_q;
	wire  [5:0]   wire_trailing_zeros_cnt_q;
	reg	[11:0]	aligned_dataa_exp_dffe12;
	reg	[11:0]	aligned_dataa_exp_dffe13;
	reg	[11:0]	aligned_dataa_exp_dffe14;
	reg	[52:0]	aligned_dataa_man_dffe12;
	reg	[52:0]	aligned_dataa_man_dffe13;
	reg	[52:0]	aligned_dataa_man_dffe14;
	reg	aligned_dataa_sign_dffe12;
	reg	aligned_dataa_sign_dffe13;
	reg	aligned_dataa_sign_dffe14;
	reg	[11:0]	aligned_datab_exp_dffe12;
	reg	[11:0]	aligned_datab_exp_dffe13;
	reg	[11:0]	aligned_datab_exp_dffe14;
	reg	[52:0]	aligned_datab_man_dffe12;
	reg	[52:0]	aligned_datab_man_dffe13;
	reg	[52:0]	aligned_datab_man_dffe14;
	reg	aligned_datab_sign_dffe12;
	reg	aligned_datab_sign_dffe13;
	reg	aligned_datab_sign_dffe14;
	reg	both_inputs_are_infinite_dffe1;
	reg	[10:0]	data_exp_dffe1;
	reg	[63:0]	dataa_dffe11;
	reg	[54:0]	dataa_man_dffe1;
	reg	dataa_sign_dffe1;
	reg	[63:0]	datab_dffe11;
	reg	[54:0]	datab_man_dffe1;
	reg	datab_sign_dffe1;
	reg	denormal_res_dffe3;
	reg	denormal_res_dffe32;
	reg	denormal_res_dffe4;
	reg	[1:0]	exp_adj_dffe21;
	reg	[1:0]	exp_adj_dffe23;
	reg	exp_amb_mux_dffe13;
	reg	exp_amb_mux_dffe14;
	reg	[10:0]	exp_out_dffe5;
	reg	[10:0]	exp_res_dffe2;
	reg	[10:0]	exp_res_dffe21;
	reg	[10:0]	exp_res_dffe23;
	reg	[10:0]	exp_res_dffe27;
	reg	[10:0]	exp_res_dffe3;
	reg	[10:0]	exp_res_dffe32;
	reg	[10:0]	exp_res_dffe4;
	reg	infinite_output_sign_dffe1;
	reg	infinite_output_sign_dffe2;
	reg	infinite_output_sign_dffe21;
	reg	infinite_output_sign_dffe23;
	reg	infinite_output_sign_dffe27;
	reg	infinite_output_sign_dffe3;
	reg	infinite_output_sign_dffe31;
	reg	infinite_output_sign_dffe32;
	reg	infinite_output_sign_dffe4;
	reg	infinite_res_dffe3;
	reg	infinite_res_dffe32;
	reg	infinite_res_dffe4;
	reg	infinity_magnitude_sub_dffe2;
	reg	infinity_magnitude_sub_dffe21;
	reg	infinity_magnitude_sub_dffe23;
	reg	infinity_magnitude_sub_dffe27;
	reg	infinity_magnitude_sub_dffe3;
	reg	infinity_magnitude_sub_dffe31;
	reg	infinity_magnitude_sub_dffe32;
	reg	infinity_magnitude_sub_dffe4;
	reg	input_dataa_denormal_dffe11;
	reg	input_dataa_infinite_dffe11;
	reg	input_dataa_infinite_dffe12;
	reg	input_dataa_infinite_dffe13;
	reg	input_dataa_infinite_dffe14;
	reg	input_dataa_nan_dffe11;
	reg	input_dataa_nan_dffe12;
	reg	input_dataa_zero_dffe11;
	reg	input_datab_denormal_dffe11;
	reg	input_datab_infinite_dffe11;
	reg	input_datab_infinite_dffe12;
	reg	input_datab_infinite_dffe13;
	reg	input_datab_infinite_dffe14;
	reg	input_datab_nan_dffe11;
	reg	input_datab_nan_dffe12;
	reg	input_datab_zero_dffe11;
	reg	input_is_infinite_dffe1;
	reg	input_is_infinite_dffe2;
	reg	input_is_infinite_dffe21;
	reg	input_is_infinite_dffe23;
	reg	input_is_infinite_dffe27;
	reg	input_is_infinite_dffe3;
	reg	input_is_infinite_dffe31;
	reg	input_is_infinite_dffe32;
	reg	input_is_infinite_dffe4;
	reg	input_is_nan_dffe1;
	reg	input_is_nan_dffe13;
	reg	input_is_nan_dffe14;
	reg	input_is_nan_dffe2;
	reg	input_is_nan_dffe21;
	reg	input_is_nan_dffe23;
	reg	input_is_nan_dffe27;
	reg	input_is_nan_dffe3;
	reg	input_is_nan_dffe31;
	reg	input_is_nan_dffe32;
	reg	input_is_nan_dffe4;
	reg	[54:0]	man_add_sub_res_mag_dffe21;
	reg	[54:0]	man_add_sub_res_mag_dffe23;
	reg	[56:0]	man_add_sub_res_mag_dffe27;
	reg	man_add_sub_res_sign_dffe21;
	reg	man_add_sub_res_sign_dffe23;
	reg	man_add_sub_res_sign_dffe27;
	reg	[54:0]	man_dffe31;
	reg	[5:0]	man_leading_zeros_dffe31;
	reg	[51:0]	man_out_dffe5;
	reg	[51:0]	man_res_dffe4;
	reg	man_res_is_not_zero_dffe3;
	reg	man_res_is_not_zero_dffe31;
	reg	man_res_is_not_zero_dffe32;
	reg	man_res_is_not_zero_dffe4;
	reg	man_res_not_zero_dffe23;
	reg	[52:0]	man_smaller_dffe13;
	reg	need_complement_dffe2;
	reg	round_bit_dffe21;
	reg	round_bit_dffe23;
	reg	round_bit_dffe3;
	reg	round_bit_dffe31;
	reg	round_bit_dffe32;
	reg	rounded_res_infinity_dffe4;
	reg	[5:0]	rshift_distance_dffe13;
	reg	[5:0]	rshift_distance_dffe14;
	reg	sign_dffe31;
	reg	sign_dffe32;
	reg	sign_out_dffe5;
	reg	sign_res_dffe3;
	reg	sign_res_dffe4;
	reg	sticky_bit_dffe1;
	reg	sticky_bit_dffe2;
	reg	sticky_bit_dffe21;
	reg	sticky_bit_dffe23;
	reg	sticky_bit_dffe27;
	reg	sticky_bit_dffe3;
	reg	sticky_bit_dffe31;
	reg	sticky_bit_dffe32;
	reg	zero_man_sign_dffe2;
	reg	zero_man_sign_dffe21;
	reg	zero_man_sign_dffe23;
	reg	zero_man_sign_dffe27;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[11:0]	wire_add_sub1_pipeline_dffe_Q;
	wire	[11:0]	wire_add_sub1_pipeline_dffe_D;
	wire	[11:0]	wire_add_sub1_result_int;
	wire	wire_add_sub1_aclr;
	wire	wire_add_sub1_clken;
	wire	wire_add_sub1_clock;
	wire	[11:0]	wire_add_sub1_dataa;
	wire	[11:0]	wire_add_sub1_datab;
	wire	[11:0]	wire_add_sub1_result;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[11:0]	wire_add_sub2_pipeline_dffe_Q;
	wire	[11:0]	wire_add_sub2_pipeline_dffe_D;
	wire	[11:0]	wire_add_sub2_result_int;
	wire	wire_add_sub2_aclr;
	wire	wire_add_sub2_clken;
	wire	wire_add_sub2_clock;
	wire	[11:0]	wire_add_sub2_dataa;
	wire	[11:0]	wire_add_sub2_datab;
	wire	[11:0]	wire_add_sub2_result;
	wire	[6:0]	wire_add_sub3_dataa;
	wire	[6:0]	wire_add_sub3_datab;
	wire	[6:0]	wire_add_sub3_result;
	wire  [56:0]   wire_add_sub4_result;
	wire  [56:0]   wire_add_sub5_result;
	wire	[11:0]	wire_add_sub6_dataa;
	wire	[11:0]	wire_add_sub6_datab;
	wire	[11:0]	wire_add_sub6_result;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[11:0]	wire_add_sub7_pipeline_dffe_Q;
	wire	[11:0]	wire_add_sub7_pipeline_dffe_D;
	wire	[11:0]	wire_add_sub7_result_int;
	wire	wire_add_sub7_aclr;
	wire	wire_add_sub7_clken;
	wire	wire_add_sub7_clock;
	wire	[11:0]	wire_add_sub7_dataa;
	wire	[11:0]	wire_add_sub7_datab;
	wire	[11:0]	wire_add_sub7_result;
	wire	[54:0]	wire_add_sub8_dataa;
	wire	[54:0]	wire_add_sub8_datab;
	wire	[54:0]	wire_add_sub8_result;
	wire	[11:0]	wire_add_sub9_dataa;
	wire	[11:0]	wire_add_sub9_datab;
	wire	[11:0]	wire_add_sub9_result;
	reg	wire_trailing_zeros_limit_comparator_agb_int;
	wire	wire_trailing_zeros_limit_comparator_agb;
	wire	[6:0]	wire_trailing_zeros_limit_comparator_dataa;
	wire	[6:0]	wire_trailing_zeros_limit_comparator_datab;
	wire	[6:0]	wire_trailing_zeros_limit_comparator_dataa_int;
	wire	[6:0]	wire_trailing_zeros_limit_comparator_datab_int;
	wire aclr;
	wire  add_sub_dffe25_wi;
	wire  add_sub_dffe25_wo;
	wire  add_sub_w2;
	wire  [11:0]  aligned_dataa_exp_dffe12_wi;
	wire  [11:0]  aligned_dataa_exp_dffe12_wo;
	wire  [11:0]  aligned_dataa_exp_dffe13_wi;
	wire  [11:0]  aligned_dataa_exp_dffe13_wo;
	wire  [11:0]  aligned_dataa_exp_dffe14_wi;
	wire  [11:0]  aligned_dataa_exp_dffe14_wo;
	wire  [11:0]  aligned_dataa_exp_dffe15_wi;
	wire  [11:0]  aligned_dataa_exp_dffe15_wo;
	wire  [11:0]  aligned_dataa_exp_w;
	wire  [52:0]  aligned_dataa_man_dffe12_wi;
	wire  [52:0]  aligned_dataa_man_dffe12_wo;
	wire  [52:0]  aligned_dataa_man_dffe13_wi;
	wire  [52:0]  aligned_dataa_man_dffe13_wo;
	wire  [52:0]  aligned_dataa_man_dffe14_wi;
	wire  [52:0]  aligned_dataa_man_dffe14_wo;
	wire  [54:0]  aligned_dataa_man_dffe15_w;
	wire  [52:0]  aligned_dataa_man_dffe15_wi;
	wire  [52:0]  aligned_dataa_man_dffe15_wo;
	wire  [54:0]  aligned_dataa_man_w;
	wire  aligned_dataa_sign_dffe12_wi;
	wire  aligned_dataa_sign_dffe12_wo;
	wire  aligned_dataa_sign_dffe13_wi;
	wire  aligned_dataa_sign_dffe13_wo;
	wire  aligned_dataa_sign_dffe14_wi;
	wire  aligned_dataa_sign_dffe14_wo;
	wire  aligned_dataa_sign_dffe15_wi;
	wire  aligned_dataa_sign_dffe15_wo;
	wire  aligned_dataa_sign_w;
	wire  [11:0]  aligned_datab_exp_dffe12_wi;
	wire  [11:0]  aligned_datab_exp_dffe12_wo;
	wire  [11:0]  aligned_datab_exp_dffe13_wi;
	wire  [11:0]  aligned_datab_exp_dffe13_wo;
	wire  [11:0]  aligned_datab_exp_dffe14_wi;
	wire  [11:0]  aligned_datab_exp_dffe14_wo;
	wire  [11:0]  aligned_datab_exp_dffe15_wi;
	wire  [11:0]  aligned_datab_exp_dffe15_wo;
	wire  [11:0]  aligned_datab_exp_w;
	wire  [52:0]  aligned_datab_man_dffe12_wi;
	wire  [52:0]  aligned_datab_man_dffe12_wo;
	wire  [52:0]  aligned_datab_man_dffe13_wi;
	wire  [52:0]  aligned_datab_man_dffe13_wo;
	wire  [52:0]  aligned_datab_man_dffe14_wi;
	wire  [52:0]  aligned_datab_man_dffe14_wo;
	wire  [54:0]  aligned_datab_man_dffe15_w;
	wire  [52:0]  aligned_datab_man_dffe15_wi;
	wire  [52:0]  aligned_datab_man_dffe15_wo;
	wire  [54:0]  aligned_datab_man_w;
	wire  aligned_datab_sign_dffe12_wi;
	wire  aligned_datab_sign_dffe12_wo;
	wire  aligned_datab_sign_dffe13_wi;
	wire  aligned_datab_sign_dffe13_wo;
	wire  aligned_datab_sign_dffe14_wi;
	wire  aligned_datab_sign_dffe14_wo;
	wire  aligned_datab_sign_dffe15_wi;
	wire  aligned_datab_sign_dffe15_wo;
	wire  aligned_datab_sign_w;
	wire  borrow_w;
	wire  both_inputs_are_infinite_dffe1_wi;
	wire  both_inputs_are_infinite_dffe1_wo;
	wire  both_inputs_are_infinite_dffe25_wi;
	wire  both_inputs_are_infinite_dffe25_wo;
	wire clk_en;
	wire  [10:0]  data_exp_dffe1_wi;
	wire  [10:0]  data_exp_dffe1_wo;
	wire  [63:0]  dataa_dffe11_wi;
	wire  [63:0]  dataa_dffe11_wo;
	wire  [54:0]  dataa_man_dffe1_wi;
	wire  [54:0]  dataa_man_dffe1_wo;
	wire  dataa_sign_dffe1_wi;
	wire  dataa_sign_dffe1_wo;
	wire  dataa_sign_dffe25_wi;
	wire  dataa_sign_dffe25_wo;
	wire  [63:0]  datab_dffe11_wi;
	wire  [63:0]  datab_dffe11_wo;
	wire  [54:0]  datab_man_dffe1_wi;
	wire  [54:0]  datab_man_dffe1_wo;
	wire  datab_sign_dffe1_wi;
	wire  datab_sign_dffe1_wo;
	wire  denormal_flag_w;
	wire  denormal_res_dffe32_wi;
	wire  denormal_res_dffe32_wo;
	wire  denormal_res_dffe33_wi;
	wire  denormal_res_dffe33_wo;
	wire  denormal_res_dffe3_wi;
	wire  denormal_res_dffe3_wo;
	wire  denormal_res_dffe41_wi;
	wire  denormal_res_dffe41_wo;
	wire  denormal_res_dffe42_wi;
	wire  denormal_res_dffe42_wo;
	wire  denormal_res_dffe4_wi;
	wire  denormal_res_dffe4_wo;
	wire  denormal_result_w;
	wire  [10:0]  exp_a_all_one_w;
	wire  [10:0]  exp_a_not_zero_w;
	wire  [9:0]  exp_adj_0pads;
	wire  [1:0]  exp_adj_dffe21_wi;
	wire  [1:0]  exp_adj_dffe21_wo;
	wire  [1:0]  exp_adj_dffe23_wi;
	wire  [1:0]  exp_adj_dffe23_wo;
	wire  [1:0]  exp_adj_dffe26_wi;
	wire  [1:0]  exp_adj_dffe26_wo;
	wire  [1:0]  exp_adjust_by_add1;
	wire  [1:0]  exp_adjust_by_add2;
	wire  [11:0]  exp_adjustment2_add_sub_dataa_w;
	wire  [11:0]  exp_adjustment2_add_sub_datab_w;
	wire  [11:0]  exp_adjustment2_add_sub_w;
	wire  [11:0]  exp_adjustment_add_sub_dataa_w;
	wire  [11:0]  exp_adjustment_add_sub_datab_w;
	wire  [11:0]  exp_adjustment_add_sub_w;
	wire  [10:0]  exp_all_ones_w;
	wire  [10:0]  exp_all_zeros_w;
	wire  exp_amb_mux_dffe13_wi;
	wire  exp_amb_mux_dffe13_wo;
	wire  exp_amb_mux_dffe14_wi;
	wire  exp_amb_mux_dffe14_wo;
	wire  exp_amb_mux_dffe15_wi;
	wire  exp_amb_mux_dffe15_wo;
	wire  exp_amb_mux_w;
	wire  [11:0]  exp_amb_w;
	wire  [10:0]  exp_b_all_one_w;
	wire  [10:0]  exp_b_not_zero_w;
	wire  [11:0]  exp_bma_w;
	wire  [4:0]  exp_diff_abs_exceed_max_w;
	wire  [5:0]  exp_diff_abs_max_w;
	wire  [10:0]  exp_diff_abs_w;
	wire  [10:0]  exp_intermediate_res_dffe41_wi;
	wire  [10:0]  exp_intermediate_res_dffe41_wo;
	wire  [10:0]  exp_intermediate_res_dffe42_wi;
	wire  [10:0]  exp_intermediate_res_dffe42_wo;
	wire  [10:0]  exp_intermediate_res_w;
	wire  [10:0]  exp_out_dffe5_wi;
	wire  [10:0]  exp_out_dffe5_wo;
	wire  [10:0]  exp_res_dffe21_wi;
	wire  [10:0]  exp_res_dffe21_wo;
	wire  [10:0]  exp_res_dffe22_wi;
	wire  [10:0]  exp_res_dffe22_wo;
	wire  [10:0]  exp_res_dffe23_wi;
	wire  [10:0]  exp_res_dffe23_wo;
	wire  [10:0]  exp_res_dffe25_wi;
	wire  [10:0]  exp_res_dffe25_wo;
	wire  [10:0]  exp_res_dffe26_wi;
	wire  [10:0]  exp_res_dffe26_wo;
	wire  [10:0]  exp_res_dffe27_wi;
	wire  [10:0]  exp_res_dffe27_wo;
	wire  [10:0]  exp_res_dffe2_wi;
	wire  [10:0]  exp_res_dffe2_wo;
	wire  [10:0]  exp_res_dffe32_wi;
	wire  [10:0]  exp_res_dffe32_wo;
	wire  [10:0]  exp_res_dffe33_wi;
	wire  [10:0]  exp_res_dffe33_wo;
	wire  [10:0]  exp_res_dffe3_wi;
	wire  [10:0]  exp_res_dffe3_wo;
	wire  [10:0]  exp_res_dffe4_wi;
	wire  [10:0]  exp_res_dffe4_wo;
	wire  [10:0]  exp_res_max_w;
	wire  [11:0]  exp_res_not_zero_w;
	wire  [11:0]  exp_res_rounding_adder_dataa_w;
	wire  [11:0]  exp_res_rounding_adder_w;
	wire  exp_rounded_res_infinity_w;
	wire  [10:0]  exp_rounded_res_max_w;
	wire  [10:0]  exp_rounded_res_w;
	wire  [11:0]  exp_rounding_adjustment_w;
	wire  [11:0]  exp_value;
	wire  force_infinity_w;
	wire  force_nan_w;
	wire  force_zero_w;
	wire  guard_bit_dffe3_wo;
	wire  infinite_output_sign_dffe1_wi;
	wire  infinite_output_sign_dffe1_wo;
	wire  infinite_output_sign_dffe21_wi;
	wire  infinite_output_sign_dffe21_wo;
	wire  infinite_output_sign_dffe22_wi;
	wire  infinite_output_sign_dffe22_wo;
	wire  infinite_output_sign_dffe23_wi;
	wire  infinite_output_sign_dffe23_wo;
	wire  infinite_output_sign_dffe25_wi;
	wire  infinite_output_sign_dffe25_wo;
	wire  infinite_output_sign_dffe26_wi;
	wire  infinite_output_sign_dffe26_wo;
	wire  infinite_output_sign_dffe27_wi;
	wire  infinite_output_sign_dffe27_wo;
	wire  infinite_output_sign_dffe2_wi;
	wire  infinite_output_sign_dffe2_wo;
	wire  infinite_output_sign_dffe31_wi;
	wire  infinite_output_sign_dffe31_wo;
	wire  infinite_output_sign_dffe32_wi;
	wire  infinite_output_sign_dffe32_wo;
	wire  infinite_output_sign_dffe33_wi;
	wire  infinite_output_sign_dffe33_wo;
	wire  infinite_output_sign_dffe3_wi;
	wire  infinite_output_sign_dffe3_wo;
	wire  infinite_output_sign_dffe41_wi;
	wire  infinite_output_sign_dffe41_wo;
	wire  infinite_output_sign_dffe42_wi;
	wire  infinite_output_sign_dffe42_wo;
	wire  infinite_output_sign_dffe4_wi;
	wire  infinite_output_sign_dffe4_wo;
	wire  infinite_res_dff32_wi;
	wire  infinite_res_dff32_wo;
	wire  infinite_res_dff33_wi;
	wire  infinite_res_dff33_wo;
	wire  infinite_res_dffe3_wi;
	wire  infinite_res_dffe3_wo;
	wire  infinite_res_dffe41_wi;
	wire  infinite_res_dffe41_wo;
	wire  infinite_res_dffe42_wi;
	wire  infinite_res_dffe42_wo;
	wire  infinite_res_dffe4_wi;
	wire  infinite_res_dffe4_wo;
	wire  infinity_magnitude_sub_dffe21_wi;
	wire  infinity_magnitude_sub_dffe21_wo;
	wire  infinity_magnitude_sub_dffe22_wi;
	wire  infinity_magnitude_sub_dffe22_wo;
	wire  infinity_magnitude_sub_dffe23_wi;
	wire  infinity_magnitude_sub_dffe23_wo;
	wire  infinity_magnitude_sub_dffe26_wi;
	wire  infinity_magnitude_sub_dffe26_wo;
	wire  infinity_magnitude_sub_dffe27_wi;
	wire  infinity_magnitude_sub_dffe27_wo;
	wire  infinity_magnitude_sub_dffe2_wi;
	wire  infinity_magnitude_sub_dffe2_wo;
	wire  infinity_magnitude_sub_dffe31_wi;
	wire  infinity_magnitude_sub_dffe31_wo;
	wire  infinity_magnitude_sub_dffe32_wi;
	wire  infinity_magnitude_sub_dffe32_wo;
	wire  infinity_magnitude_sub_dffe33_wi;
	wire  infinity_magnitude_sub_dffe33_wo;
	wire  infinity_magnitude_sub_dffe3_wi;
	wire  infinity_magnitude_sub_dffe3_wo;
	wire  infinity_magnitude_sub_dffe41_wi;
	wire  infinity_magnitude_sub_dffe41_wo;
	wire  infinity_magnitude_sub_dffe42_wi;
	wire  infinity_magnitude_sub_dffe42_wo;
	wire  infinity_magnitude_sub_dffe4_wi;
	wire  infinity_magnitude_sub_dffe4_wo;
	wire  input_dataa_denormal_dffe11_wi;
	wire  input_dataa_denormal_dffe11_wo;
	wire  input_dataa_denormal_w;
	wire  input_dataa_infinite_dffe11_wi;
	wire  input_dataa_infinite_dffe11_wo;
	wire  input_dataa_infinite_dffe12_wi;
	wire  input_dataa_infinite_dffe12_wo;
	wire  input_dataa_infinite_dffe13_wi;
	wire  input_dataa_infinite_dffe13_wo;
	wire  input_dataa_infinite_dffe14_wi;
	wire  input_dataa_infinite_dffe14_wo;
	wire  input_dataa_infinite_dffe15_wi;
	wire  input_dataa_infinite_dffe15_wo;
	wire  input_dataa_infinite_w;
	wire  input_dataa_nan_dffe11_wi;
	wire  input_dataa_nan_dffe11_wo;
	wire  input_dataa_nan_dffe12_wi;
	wire  input_dataa_nan_dffe12_wo;
	wire  input_dataa_nan_w;
	wire  input_dataa_zero_dffe11_wi;
	wire  input_dataa_zero_dffe11_wo;
	wire  input_dataa_zero_w;
	wire  input_datab_denormal_dffe11_wi;
	wire  input_datab_denormal_dffe11_wo;
	wire  input_datab_denormal_w;
	wire  input_datab_infinite_dffe11_wi;
	wire  input_datab_infinite_dffe11_wo;
	wire  input_datab_infinite_dffe12_wi;
	wire  input_datab_infinite_dffe12_wo;
	wire  input_datab_infinite_dffe13_wi;
	wire  input_datab_infinite_dffe13_wo;
	wire  input_datab_infinite_dffe14_wi;
	wire  input_datab_infinite_dffe14_wo;
	wire  input_datab_infinite_dffe15_wi;
	wire  input_datab_infinite_dffe15_wo;
	wire  input_datab_infinite_w;
	wire  input_datab_nan_dffe11_wi;
	wire  input_datab_nan_dffe11_wo;
	wire  input_datab_nan_dffe12_wi;
	wire  input_datab_nan_dffe12_wo;
	wire  input_datab_nan_w;
	wire  input_datab_zero_dffe11_wi;
	wire  input_datab_zero_dffe11_wo;
	wire  input_datab_zero_w;
	wire  input_is_infinite_dffe1_wi;
	wire  input_is_infinite_dffe1_wo;
	wire  input_is_infinite_dffe21_wi;
	wire  input_is_infinite_dffe21_wo;
	wire  input_is_infinite_dffe22_wi;
	wire  input_is_infinite_dffe22_wo;
	wire  input_is_infinite_dffe23_wi;
	wire  input_is_infinite_dffe23_wo;
	wire  input_is_infinite_dffe25_wi;
	wire  input_is_infinite_dffe25_wo;
	wire  input_is_infinite_dffe26_wi;
	wire  input_is_infinite_dffe26_wo;
	wire  input_is_infinite_dffe27_wi;
	wire  input_is_infinite_dffe27_wo;
	wire  input_is_infinite_dffe2_wi;
	wire  input_is_infinite_dffe2_wo;
	wire  input_is_infinite_dffe31_wi;
	wire  input_is_infinite_dffe31_wo;
	wire  input_is_infinite_dffe32_wi;
	wire  input_is_infinite_dffe32_wo;
	wire  input_is_infinite_dffe33_wi;
	wire  input_is_infinite_dffe33_wo;
	wire  input_is_infinite_dffe3_wi;
	wire  input_is_infinite_dffe3_wo;
	wire  input_is_infinite_dffe41_wi;
	wire  input_is_infinite_dffe41_wo;
	wire  input_is_infinite_dffe42_wi;
	wire  input_is_infinite_dffe42_wo;
	wire  input_is_infinite_dffe4_wi;
	wire  input_is_infinite_dffe4_wo;
	wire  input_is_nan_dffe13_wi;
	wire  input_is_nan_dffe13_wo;
	wire  input_is_nan_dffe14_wi;
	wire  input_is_nan_dffe14_wo;
	wire  input_is_nan_dffe15_wi;
	wire  input_is_nan_dffe15_wo;
	wire  input_is_nan_dffe1_wi;
	wire  input_is_nan_dffe1_wo;
	wire  input_is_nan_dffe21_wi;
	wire  input_is_nan_dffe21_wo;
	wire  input_is_nan_dffe22_wi;
	wire  input_is_nan_dffe22_wo;
	wire  input_is_nan_dffe23_wi;
	wire  input_is_nan_dffe23_wo;
	wire  input_is_nan_dffe25_wi;
	wire  input_is_nan_dffe25_wo;
	wire  input_is_nan_dffe26_wi;
	wire  input_is_nan_dffe26_wo;
	wire  input_is_nan_dffe27_wi;
	wire  input_is_nan_dffe27_wo;
	wire  input_is_nan_dffe2_wi;
	wire  input_is_nan_dffe2_wo;
	wire  input_is_nan_dffe31_wi;
	wire  input_is_nan_dffe31_wo;
	wire  input_is_nan_dffe32_wi;
	wire  input_is_nan_dffe32_wo;
	wire  input_is_nan_dffe33_wi;
	wire  input_is_nan_dffe33_wo;
	wire  input_is_nan_dffe3_wi;
	wire  input_is_nan_dffe3_wo;
	wire  input_is_nan_dffe41_wi;
	wire  input_is_nan_dffe41_wo;
	wire  input_is_nan_dffe42_wi;
	wire  input_is_nan_dffe42_wo;
	wire  input_is_nan_dffe4_wi;
	wire  input_is_nan_dffe4_wo;
	wire  [56:0]  man_2comp_res_dataa_w;
	wire  [56:0]  man_2comp_res_datab_w;
	wire  [56:0]  man_2comp_res_w;
	wire  [51:0]  man_a_not_zero_w;
	wire  [56:0]  man_add_sub_dataa_w;
	wire  [56:0]  man_add_sub_datab_w;
	wire  [54:0]  man_add_sub_res_mag_dffe21_wi;
	wire  [54:0]  man_add_sub_res_mag_dffe21_wo;
	wire  [54:0]  man_add_sub_res_mag_dffe23_wi;
	wire  [54:0]  man_add_sub_res_mag_dffe23_wo;
	wire  [54:0]  man_add_sub_res_mag_dffe26_wi;
	wire  [54:0]  man_add_sub_res_mag_dffe26_wo;
	wire  [56:0]  man_add_sub_res_mag_dffe27_wi;
	wire  [56:0]  man_add_sub_res_mag_dffe27_wo;
	wire  [56:0]  man_add_sub_res_mag_w2;
	wire  man_add_sub_res_sign_dffe21_wo;
	wire  man_add_sub_res_sign_dffe23_wi;
	wire  man_add_sub_res_sign_dffe23_wo;
	wire  man_add_sub_res_sign_dffe26_wi;
	wire  man_add_sub_res_sign_dffe26_wo;
	wire  man_add_sub_res_sign_dffe27_wi;
	wire  man_add_sub_res_sign_dffe27_wo;
	wire  man_add_sub_res_sign_w2;
	wire  [56:0]  man_add_sub_w;
	wire  [51:0]  man_all_zeros_w;
	wire  [51:0]  man_b_not_zero_w;
	wire  [54:0]  man_dffe31_wo;
	wire  [54:0]  man_intermediate_res_w;
	wire  [5:0]  man_leading_zeros_cnt_w;
	wire  [5:0]  man_leading_zeros_dffe31_wi;
	wire  [5:0]  man_leading_zeros_dffe31_wo;
	wire  [51:0]  man_nan_w;
	wire  [51:0]  man_out_dffe5_wi;
	wire  [51:0]  man_out_dffe5_wo;
	wire  [51:0]  man_res_dffe4_wi;
	wire  [51:0]  man_res_dffe4_wo;
	wire  man_res_is_not_zero_dffe31_wi;
	wire  man_res_is_not_zero_dffe31_wo;
	wire  man_res_is_not_zero_dffe32_wi;
	wire  man_res_is_not_zero_dffe32_wo;
	wire  man_res_is_not_zero_dffe33_wi;
	wire  man_res_is_not_zero_dffe33_wo;
	wire  man_res_is_not_zero_dffe3_wi;
	wire  man_res_is_not_zero_dffe3_wo;
	wire  man_res_is_not_zero_dffe41_wi;
	wire  man_res_is_not_zero_dffe41_wo;
	wire  man_res_is_not_zero_dffe42_wi;
	wire  man_res_is_not_zero_dffe42_wo;
	wire  man_res_is_not_zero_dffe4_wi;
	wire  man_res_is_not_zero_dffe4_wo;
	wire  [54:0]  man_res_mag_w2;
	wire  man_res_not_zero_dffe23_wi;
	wire  man_res_not_zero_dffe23_wo;
	wire  man_res_not_zero_dffe26_wi;
	wire  man_res_not_zero_dffe26_wo;
	wire  [53:0]  man_res_not_zero_w2;
	wire  [54:0]  man_res_rounding_add_sub_datab_w;
	wire  [54:0]  man_res_rounding_add_sub_w;
	wire  [52:0]  man_res_w3;
	wire  [51:0]  man_rounded_res_w;
	wire  man_rounding_add_value_w;
	wire  [52:0]  man_smaller_dffe13_wi;
	wire  [52:0]  man_smaller_dffe13_wo;
	wire  [52:0]  man_smaller_w;
	wire  need_complement_dffe22_wi;
	wire  need_complement_dffe22_wo;
	wire  need_complement_dffe2_wi;
	wire  need_complement_dffe2_wo;
	wire  [1:0]  pos_sign_bit_ext;
	wire  [5:0]  priority_encoder_1pads_w;
	wire  round_bit_dffe21_wi;
	wire  round_bit_dffe21_wo;
	wire  round_bit_dffe23_wi;
	wire  round_bit_dffe23_wo;
	wire  round_bit_dffe26_wi;
	wire  round_bit_dffe26_wo;
	wire  round_bit_dffe31_wi;
	wire  round_bit_dffe31_wo;
	wire  round_bit_dffe32_wi;
	wire  round_bit_dffe32_wo;
	wire  round_bit_dffe33_wi;
	wire  round_bit_dffe33_wo;
	wire  round_bit_dffe3_wi;
	wire  round_bit_dffe3_wo;
	wire  round_bit_w;
	wire  rounded_res_infinity_dffe4_wi;
	wire  rounded_res_infinity_dffe4_wo;
	wire  [5:0]  rshift_distance_dffe13_wi;
	wire  [5:0]  rshift_distance_dffe13_wo;
	wire  [5:0]  rshift_distance_dffe14_wi;
	wire  [5:0]  rshift_distance_dffe14_wo;
	wire  [5:0]  rshift_distance_dffe15_wi;
	wire  [5:0]  rshift_distance_dffe15_wo;
	wire  [5:0]  rshift_distance_w;
	wire  sign_dffe31_wi;
	wire  sign_dffe31_wo;
	wire  sign_dffe32_wi;
	wire  sign_dffe32_wo;
	wire  sign_dffe33_wi;
	wire  sign_dffe33_wo;
	wire  sign_out_dffe5_wi;
	wire  sign_out_dffe5_wo;
	wire  sign_res_dffe3_wi;
	wire  sign_res_dffe3_wo;
	wire  sign_res_dffe41_wi;
	wire  sign_res_dffe41_wo;
	wire  sign_res_dffe42_wi;
	wire  sign_res_dffe42_wo;
	wire  sign_res_dffe4_wi;
	wire  sign_res_dffe4_wo;
	wire  [6:0]  sticky_bit_cnt_dataa_w;
	wire  [6:0]  sticky_bit_cnt_datab_w;
	wire  [6:0]  sticky_bit_cnt_res_w;
	wire  sticky_bit_dffe1_wi;
	wire  sticky_bit_dffe1_wo;
	wire  sticky_bit_dffe21_wi;
	wire  sticky_bit_dffe21_wo;
	wire  sticky_bit_dffe22_wi;
	wire  sticky_bit_dffe22_wo;
	wire  sticky_bit_dffe23_wi;
	wire  sticky_bit_dffe23_wo;
	wire  sticky_bit_dffe25_wi;
	wire  sticky_bit_dffe25_wo;
	wire  sticky_bit_dffe26_wi;
	wire  sticky_bit_dffe26_wo;
	wire  sticky_bit_dffe27_wi;
	wire  sticky_bit_dffe27_wo;
	wire  sticky_bit_dffe2_wi;
	wire  sticky_bit_dffe2_wo;
	wire  sticky_bit_dffe31_wi;
	wire  sticky_bit_dffe31_wo;
	wire  sticky_bit_dffe32_wi;
	wire  sticky_bit_dffe32_wo;
	wire  sticky_bit_dffe33_wi;
	wire  sticky_bit_dffe33_wo;
	wire  sticky_bit_dffe3_wi;
	wire  sticky_bit_dffe3_wo;
	wire  sticky_bit_w;
	wire  [6:0]  trailing_zeros_limit_w;
	wire  zero_man_sign_dffe21_wi;
	wire  zero_man_sign_dffe21_wo;
	wire  zero_man_sign_dffe22_wi;
	wire  zero_man_sign_dffe22_wo;
	wire  zero_man_sign_dffe23_wi;
	wire  zero_man_sign_dffe23_wo;
	wire  zero_man_sign_dffe26_wi;
	wire  zero_man_sign_dffe26_wo;
	wire  zero_man_sign_dffe27_wi;
	wire  zero_man_sign_dffe27_wo;
	wire  zero_man_sign_dffe2_wi;
	wire  zero_man_sign_dffe2_wo;

	AlteraAdder_altbarrel_shift   lbarrel_shift
	( 
	.aclr(aclr),
	.clk_en(clk_en),
	.clock(clock),
	.data(man_dffe31_wo),
	.distance(man_leading_zeros_cnt_w),
	.result(wire_lbarrel_shift_result));
	AlteraAdder_altbarrel_shift1   rbarrel_shift
	( 
	.aclr(aclr),
	.clk_en(clk_en),
	.clock(clock),
	.data({man_smaller_dffe13_wo, {2{1'b0}}}),
	.distance(rshift_distance_dffe13_wo),
	.result(wire_rbarrel_shift_result));
	AlteraAdder_altpriority_encoder   leading_zeroes_cnt
	( 
	.aclr(aclr),
	.clk_en(clk_en),
	.clock(clock),
	.data({man_add_sub_res_mag_dffe21_wo[54:1], 1'b1, {9{1'b0}}}),
	.q(wire_leading_zeroes_cnt_q));
	AlteraAdder_altpriority_encoder1234567891011   trailing_zeros_cnt
	( 
	.aclr(aclr),
	.clk_en(clk_en),
	.clock(clock),
	.data({{12{1'b1}}, man_smaller_dffe13_wo[51:0]}),
	.q(wire_trailing_zeros_cnt_q));
	// synopsys translate_off
	initial
		aligned_dataa_exp_dffe12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) aligned_dataa_exp_dffe12 <= 12'b0;
		else if  (clk_en == 1'b1)   aligned_dataa_exp_dffe12 <= aligned_dataa_exp_dffe12_wi;
	// synopsys translate_off
	initial
		aligned_dataa_exp_dffe13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) aligned_dataa_exp_dffe13 <= 12'b0;
		else if  (clk_en == 1'b1)   aligned_dataa_exp_dffe13 <= aligned_dataa_exp_dffe13_wi;
	// synopsys translate_off
	initial
		aligned_dataa_exp_dffe14 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) aligned_dataa_exp_dffe14 <= 12'b0;
		else if  (clk_en == 1'b1)   aligned_dataa_exp_dffe14 <= aligned_dataa_exp_dffe14_wi;
	// synopsys translate_off
	initial
		aligned_dataa_man_dffe12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) aligned_dataa_man_dffe12 <= 53'b0;
		else if  (clk_en == 1'b1)   aligned_dataa_man_dffe12 <= aligned_dataa_man_dffe12_wi;
	// synopsys translate_off
	initial
		aligned_dataa_man_dffe13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) aligned_dataa_man_dffe13 <= 53'b0;
		else if  (clk_en == 1'b1)   aligned_dataa_man_dffe13 <= aligned_dataa_man_dffe13_wi;
	// synopsys translate_off
	initial
		aligned_dataa_man_dffe14 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) aligned_dataa_man_dffe14 <= 53'b0;
		else if  (clk_en == 1'b1)   aligned_dataa_man_dffe14 <= aligned_dataa_man_dffe14_wi;
	// synopsys translate_off
	initial
		aligned_dataa_sign_dffe12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) aligned_dataa_sign_dffe12 <= 1'b0;
		else if  (clk_en == 1'b1)   aligned_dataa_sign_dffe12 <= aligned_dataa_sign_dffe12_wi;
	// synopsys translate_off
	initial
		aligned_dataa_sign_dffe13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) aligned_dataa_sign_dffe13 <= 1'b0;
		else if  (clk_en == 1'b1)   aligned_dataa_sign_dffe13 <= aligned_dataa_sign_dffe13_wi;
	// synopsys translate_off
	initial
		aligned_dataa_sign_dffe14 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) aligned_dataa_sign_dffe14 <= 1'b0;
		else if  (clk_en == 1'b1)   aligned_dataa_sign_dffe14 <= aligned_dataa_sign_dffe14_wi;
	// synopsys translate_off
	initial
		aligned_datab_exp_dffe12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) aligned_datab_exp_dffe12 <= 12'b0;
		else if  (clk_en == 1'b1)   aligned_datab_exp_dffe12 <= aligned_datab_exp_dffe12_wi;
	// synopsys translate_off
	initial
		aligned_datab_exp_dffe13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) aligned_datab_exp_dffe13 <= 12'b0;
		else if  (clk_en == 1'b1)   aligned_datab_exp_dffe13 <= aligned_datab_exp_dffe13_wi;
	// synopsys translate_off
	initial
		aligned_datab_exp_dffe14 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) aligned_datab_exp_dffe14 <= 12'b0;
		else if  (clk_en == 1'b1)   aligned_datab_exp_dffe14 <= aligned_datab_exp_dffe14_wi;
	// synopsys translate_off
	initial
		aligned_datab_man_dffe12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) aligned_datab_man_dffe12 <= 53'b0;
		else if  (clk_en == 1'b1)   aligned_datab_man_dffe12 <= aligned_datab_man_dffe12_wi;
	// synopsys translate_off
	initial
		aligned_datab_man_dffe13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) aligned_datab_man_dffe13 <= 53'b0;
		else if  (clk_en == 1'b1)   aligned_datab_man_dffe13 <= aligned_datab_man_dffe13_wi;
	// synopsys translate_off
	initial
		aligned_datab_man_dffe14 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) aligned_datab_man_dffe14 <= 53'b0;
		else if  (clk_en == 1'b1)   aligned_datab_man_dffe14 <= aligned_datab_man_dffe14_wi;
	// synopsys translate_off
	initial
		aligned_datab_sign_dffe12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) aligned_datab_sign_dffe12 <= 1'b0;
		else if  (clk_en == 1'b1)   aligned_datab_sign_dffe12 <= aligned_datab_sign_dffe12_wi;
	// synopsys translate_off
	initial
		aligned_datab_sign_dffe13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) aligned_datab_sign_dffe13 <= 1'b0;
		else if  (clk_en == 1'b1)   aligned_datab_sign_dffe13 <= aligned_datab_sign_dffe13_wi;
	// synopsys translate_off
	initial
		aligned_datab_sign_dffe14 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) aligned_datab_sign_dffe14 <= 1'b0;
		else if  (clk_en == 1'b1)   aligned_datab_sign_dffe14 <= aligned_datab_sign_dffe14_wi;
	// synopsys translate_off
	initial
		both_inputs_are_infinite_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) both_inputs_are_infinite_dffe1 <= 1'b0;
		else if  (clk_en == 1'b1)   both_inputs_are_infinite_dffe1 <= both_inputs_are_infinite_dffe1_wi;
	// synopsys translate_off
	initial
		data_exp_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) data_exp_dffe1 <= 11'b0;
		else if  (clk_en == 1'b1)   data_exp_dffe1 <= data_exp_dffe1_wi;
	// synopsys translate_off
	initial
		dataa_dffe11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dataa_dffe11 <= 64'b0;
		else if  (clk_en == 1'b1)   dataa_dffe11 <= dataa_dffe11_wi;
	// synopsys translate_off
	initial
		dataa_man_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dataa_man_dffe1 <= 55'b0;
		else if  (clk_en == 1'b1)   dataa_man_dffe1 <= dataa_man_dffe1_wi;
	// synopsys translate_off
	initial
		dataa_sign_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) dataa_sign_dffe1 <= 1'b0;
		else if  (clk_en == 1'b1)   dataa_sign_dffe1 <= dataa_sign_dffe1_wi;
	// synopsys translate_off
	initial
		datab_dffe11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) datab_dffe11 <= 64'b0;
		else if  (clk_en == 1'b1)   datab_dffe11 <= datab_dffe11_wi;
	// synopsys translate_off
	initial
		datab_man_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) datab_man_dffe1 <= 55'b0;
		else if  (clk_en == 1'b1)   datab_man_dffe1 <= datab_man_dffe1_wi;
	// synopsys translate_off
	initial
		datab_sign_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) datab_sign_dffe1 <= 1'b0;
		else if  (clk_en == 1'b1)   datab_sign_dffe1 <= datab_sign_dffe1_wi;
	// synopsys translate_off
	initial
		denormal_res_dffe3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) denormal_res_dffe3 <= 1'b0;
		else if  (clk_en == 1'b1)   denormal_res_dffe3 <= denormal_res_dffe3_wi;
	// synopsys translate_off
	initial
		denormal_res_dffe32 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) denormal_res_dffe32 <= 1'b0;
		else if  (clk_en == 1'b1)   denormal_res_dffe32 <= denormal_res_dffe32_wi;
	// synopsys translate_off
	initial
		denormal_res_dffe4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) denormal_res_dffe4 <= 1'b0;
		else if  (clk_en == 1'b1)   denormal_res_dffe4 <= denormal_res_dffe4_wi;
	// synopsys translate_off
	initial
		exp_adj_dffe21 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_adj_dffe21 <= 2'b0;
		else if  (clk_en == 1'b1)   exp_adj_dffe21 <= exp_adj_dffe21_wi;
	// synopsys translate_off
	initial
		exp_adj_dffe23 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_adj_dffe23 <= 2'b0;
		else if  (clk_en == 1'b1)   exp_adj_dffe23 <= exp_adj_dffe23_wi;
	// synopsys translate_off
	initial
		exp_amb_mux_dffe13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_amb_mux_dffe13 <= 1'b0;
		else if  (clk_en == 1'b1)   exp_amb_mux_dffe13 <= exp_amb_mux_dffe13_wi;
	// synopsys translate_off
	initial
		exp_amb_mux_dffe14 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_amb_mux_dffe14 <= 1'b0;
		else if  (clk_en == 1'b1)   exp_amb_mux_dffe14 <= exp_amb_mux_dffe14_wi;
	// synopsys translate_off
	initial
		exp_out_dffe5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_out_dffe5 <= 11'b0;
		else if  (clk_en == 1'b1)   exp_out_dffe5 <= exp_out_dffe5_wi;
	// synopsys translate_off
	initial
		exp_res_dffe2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_res_dffe2 <= 11'b0;
		else if  (clk_en == 1'b1)   exp_res_dffe2 <= exp_res_dffe2_wi;
	// synopsys translate_off
	initial
		exp_res_dffe21 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_res_dffe21 <= 11'b0;
		else if  (clk_en == 1'b1)   exp_res_dffe21 <= exp_res_dffe21_wi;
	// synopsys translate_off
	initial
		exp_res_dffe23 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_res_dffe23 <= 11'b0;
		else if  (clk_en == 1'b1)   exp_res_dffe23 <= exp_res_dffe23_wi;
	// synopsys translate_off
	initial
		exp_res_dffe27 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_res_dffe27 <= 11'b0;
		else if  (clk_en == 1'b1)   exp_res_dffe27 <= exp_res_dffe27_wi;
	// synopsys translate_off
	initial
		exp_res_dffe3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_res_dffe3 <= 11'b0;
		else if  (clk_en == 1'b1)   exp_res_dffe3 <= exp_res_dffe3_wi;
	// synopsys translate_off
	initial
		exp_res_dffe32 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_res_dffe32 <= 11'b0;
		else if  (clk_en == 1'b1)   exp_res_dffe32 <= exp_res_dffe32_wi;
	// synopsys translate_off
	initial
		exp_res_dffe4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_res_dffe4 <= 11'b0;
		else if  (clk_en == 1'b1)   exp_res_dffe4 <= exp_res_dffe4_wi;
	// synopsys translate_off
	initial
		infinite_output_sign_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinite_output_sign_dffe1 <= 1'b0;
		else if  (clk_en == 1'b1)   infinite_output_sign_dffe1 <= infinite_output_sign_dffe1_wi;
	// synopsys translate_off
	initial
		infinite_output_sign_dffe2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinite_output_sign_dffe2 <= 1'b0;
		else if  (clk_en == 1'b1)   infinite_output_sign_dffe2 <= infinite_output_sign_dffe2_wi;
	// synopsys translate_off
	initial
		infinite_output_sign_dffe21 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinite_output_sign_dffe21 <= 1'b0;
		else if  (clk_en == 1'b1)   infinite_output_sign_dffe21 <= infinite_output_sign_dffe21_wi;
	// synopsys translate_off
	initial
		infinite_output_sign_dffe23 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinite_output_sign_dffe23 <= 1'b0;
		else if  (clk_en == 1'b1)   infinite_output_sign_dffe23 <= infinite_output_sign_dffe23_wi;
	// synopsys translate_off
	initial
		infinite_output_sign_dffe27 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinite_output_sign_dffe27 <= 1'b0;
		else if  (clk_en == 1'b1)   infinite_output_sign_dffe27 <= infinite_output_sign_dffe27_wi;
	// synopsys translate_off
	initial
		infinite_output_sign_dffe3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinite_output_sign_dffe3 <= 1'b0;
		else if  (clk_en == 1'b1)   infinite_output_sign_dffe3 <= infinite_output_sign_dffe3_wi;
	// synopsys translate_off
	initial
		infinite_output_sign_dffe31 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinite_output_sign_dffe31 <= 1'b0;
		else if  (clk_en == 1'b1)   infinite_output_sign_dffe31 <= infinite_output_sign_dffe31_wi;
	// synopsys translate_off
	initial
		infinite_output_sign_dffe32 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinite_output_sign_dffe32 <= 1'b0;
		else if  (clk_en == 1'b1)   infinite_output_sign_dffe32 <= infinite_output_sign_dffe32_wi;
	// synopsys translate_off
	initial
		infinite_output_sign_dffe4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinite_output_sign_dffe4 <= 1'b0;
		else if  (clk_en == 1'b1)   infinite_output_sign_dffe4 <= infinite_output_sign_dffe4_wi;
	// synopsys translate_off
	initial
		infinite_res_dffe3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinite_res_dffe3 <= 1'b0;
		else if  (clk_en == 1'b1)   infinite_res_dffe3 <= infinite_res_dffe3_wi;
	// synopsys translate_off
	initial
		infinite_res_dffe32 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinite_res_dffe32 <= 1'b0;
		else if  (clk_en == 1'b1)   infinite_res_dffe32 <= infinite_res_dff32_wi;
	// synopsys translate_off
	initial
		infinite_res_dffe4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinite_res_dffe4 <= 1'b0;
		else if  (clk_en == 1'b1)   infinite_res_dffe4 <= infinite_res_dffe4_wi;
	// synopsys translate_off
	initial
		infinity_magnitude_sub_dffe2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinity_magnitude_sub_dffe2 <= 1'b0;
		else if  (clk_en == 1'b1)   infinity_magnitude_sub_dffe2 <= infinity_magnitude_sub_dffe2_wi;
	// synopsys translate_off
	initial
		infinity_magnitude_sub_dffe21 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinity_magnitude_sub_dffe21 <= 1'b0;
		else if  (clk_en == 1'b1)   infinity_magnitude_sub_dffe21 <= infinity_magnitude_sub_dffe21_wi;
	// synopsys translate_off
	initial
		infinity_magnitude_sub_dffe23 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinity_magnitude_sub_dffe23 <= 1'b0;
		else if  (clk_en == 1'b1)   infinity_magnitude_sub_dffe23 <= infinity_magnitude_sub_dffe23_wi;
	// synopsys translate_off
	initial
		infinity_magnitude_sub_dffe27 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinity_magnitude_sub_dffe27 <= 1'b0;
		else if  (clk_en == 1'b1)   infinity_magnitude_sub_dffe27 <= infinity_magnitude_sub_dffe27_wi;
	// synopsys translate_off
	initial
		infinity_magnitude_sub_dffe3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinity_magnitude_sub_dffe3 <= 1'b0;
		else if  (clk_en == 1'b1)   infinity_magnitude_sub_dffe3 <= infinity_magnitude_sub_dffe3_wi;
	// synopsys translate_off
	initial
		infinity_magnitude_sub_dffe31 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinity_magnitude_sub_dffe31 <= 1'b0;
		else if  (clk_en == 1'b1)   infinity_magnitude_sub_dffe31 <= infinity_magnitude_sub_dffe31_wi;
	// synopsys translate_off
	initial
		infinity_magnitude_sub_dffe32 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinity_magnitude_sub_dffe32 <= 1'b0;
		else if  (clk_en == 1'b1)   infinity_magnitude_sub_dffe32 <= infinity_magnitude_sub_dffe32_wi;
	// synopsys translate_off
	initial
		infinity_magnitude_sub_dffe4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) infinity_magnitude_sub_dffe4 <= 1'b0;
		else if  (clk_en == 1'b1)   infinity_magnitude_sub_dffe4 <= infinity_magnitude_sub_dffe4_wi;
	// synopsys translate_off
	initial
		input_dataa_denormal_dffe11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_dataa_denormal_dffe11 <= 1'b0;
		else if  (clk_en == 1'b1)   input_dataa_denormal_dffe11 <= input_dataa_denormal_dffe11_wi;
	// synopsys translate_off
	initial
		input_dataa_infinite_dffe11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_dataa_infinite_dffe11 <= 1'b0;
		else if  (clk_en == 1'b1)   input_dataa_infinite_dffe11 <= input_dataa_infinite_dffe11_wi;
	// synopsys translate_off
	initial
		input_dataa_infinite_dffe12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_dataa_infinite_dffe12 <= 1'b0;
		else if  (clk_en == 1'b1)   input_dataa_infinite_dffe12 <= input_dataa_infinite_dffe12_wi;
	// synopsys translate_off
	initial
		input_dataa_infinite_dffe13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_dataa_infinite_dffe13 <= 1'b0;
		else if  (clk_en == 1'b1)   input_dataa_infinite_dffe13 <= input_dataa_infinite_dffe13_wi;
	// synopsys translate_off
	initial
		input_dataa_infinite_dffe14 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_dataa_infinite_dffe14 <= 1'b0;
		else if  (clk_en == 1'b1)   input_dataa_infinite_dffe14 <= input_dataa_infinite_dffe14_wi;
	// synopsys translate_off
	initial
		input_dataa_nan_dffe11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_dataa_nan_dffe11 <= 1'b0;
		else if  (clk_en == 1'b1)   input_dataa_nan_dffe11 <= input_dataa_nan_dffe11_wi;
	// synopsys translate_off
	initial
		input_dataa_nan_dffe12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_dataa_nan_dffe12 <= 1'b0;
		else if  (clk_en == 1'b1)   input_dataa_nan_dffe12 <= input_dataa_nan_dffe12_wi;
	// synopsys translate_off
	initial
		input_dataa_zero_dffe11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_dataa_zero_dffe11 <= 1'b0;
		else if  (clk_en == 1'b1)   input_dataa_zero_dffe11 <= input_dataa_zero_dffe11_wi;
	// synopsys translate_off
	initial
		input_datab_denormal_dffe11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_datab_denormal_dffe11 <= 1'b0;
		else if  (clk_en == 1'b1)   input_datab_denormal_dffe11 <= input_datab_denormal_dffe11_wi;
	// synopsys translate_off
	initial
		input_datab_infinite_dffe11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_datab_infinite_dffe11 <= 1'b0;
		else if  (clk_en == 1'b1)   input_datab_infinite_dffe11 <= input_datab_infinite_dffe11_wi;
	// synopsys translate_off
	initial
		input_datab_infinite_dffe12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_datab_infinite_dffe12 <= 1'b0;
		else if  (clk_en == 1'b1)   input_datab_infinite_dffe12 <= input_datab_infinite_dffe12_wi;
	// synopsys translate_off
	initial
		input_datab_infinite_dffe13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_datab_infinite_dffe13 <= 1'b0;
		else if  (clk_en == 1'b1)   input_datab_infinite_dffe13 <= input_datab_infinite_dffe13_wi;
	// synopsys translate_off
	initial
		input_datab_infinite_dffe14 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_datab_infinite_dffe14 <= 1'b0;
		else if  (clk_en == 1'b1)   input_datab_infinite_dffe14 <= input_datab_infinite_dffe14_wi;
	// synopsys translate_off
	initial
		input_datab_nan_dffe11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_datab_nan_dffe11 <= 1'b0;
		else if  (clk_en == 1'b1)   input_datab_nan_dffe11 <= input_datab_nan_dffe11_wi;
	// synopsys translate_off
	initial
		input_datab_nan_dffe12 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_datab_nan_dffe12 <= 1'b0;
		else if  (clk_en == 1'b1)   input_datab_nan_dffe12 <= input_datab_nan_dffe12_wi;
	// synopsys translate_off
	initial
		input_datab_zero_dffe11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_datab_zero_dffe11 <= 1'b0;
		else if  (clk_en == 1'b1)   input_datab_zero_dffe11 <= input_datab_zero_dffe11_wi;
	// synopsys translate_off
	initial
		input_is_infinite_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_infinite_dffe1 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_infinite_dffe1 <= input_is_infinite_dffe1_wi;
	// synopsys translate_off
	initial
		input_is_infinite_dffe2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_infinite_dffe2 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_infinite_dffe2 <= input_is_infinite_dffe2_wi;
	// synopsys translate_off
	initial
		input_is_infinite_dffe21 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_infinite_dffe21 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_infinite_dffe21 <= input_is_infinite_dffe21_wi;
	// synopsys translate_off
	initial
		input_is_infinite_dffe23 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_infinite_dffe23 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_infinite_dffe23 <= input_is_infinite_dffe23_wi;
	// synopsys translate_off
	initial
		input_is_infinite_dffe27 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_infinite_dffe27 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_infinite_dffe27 <= input_is_infinite_dffe27_wi;
	// synopsys translate_off
	initial
		input_is_infinite_dffe3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_infinite_dffe3 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_infinite_dffe3 <= input_is_infinite_dffe3_wi;
	// synopsys translate_off
	initial
		input_is_infinite_dffe31 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_infinite_dffe31 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_infinite_dffe31 <= input_is_infinite_dffe31_wi;
	// synopsys translate_off
	initial
		input_is_infinite_dffe32 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_infinite_dffe32 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_infinite_dffe32 <= input_is_infinite_dffe32_wi;
	// synopsys translate_off
	initial
		input_is_infinite_dffe4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_infinite_dffe4 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_infinite_dffe4 <= input_is_infinite_dffe4_wi;
	// synopsys translate_off
	initial
		input_is_nan_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_nan_dffe1 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_nan_dffe1 <= input_is_nan_dffe1_wi;
	// synopsys translate_off
	initial
		input_is_nan_dffe13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_nan_dffe13 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_nan_dffe13 <= input_is_nan_dffe13_wi;
	// synopsys translate_off
	initial
		input_is_nan_dffe14 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_nan_dffe14 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_nan_dffe14 <= input_is_nan_dffe14_wi;
	// synopsys translate_off
	initial
		input_is_nan_dffe2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_nan_dffe2 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_nan_dffe2 <= input_is_nan_dffe2_wi;
	// synopsys translate_off
	initial
		input_is_nan_dffe21 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_nan_dffe21 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_nan_dffe21 <= input_is_nan_dffe21_wi;
	// synopsys translate_off
	initial
		input_is_nan_dffe23 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_nan_dffe23 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_nan_dffe23 <= input_is_nan_dffe23_wi;
	// synopsys translate_off
	initial
		input_is_nan_dffe27 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_nan_dffe27 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_nan_dffe27 <= input_is_nan_dffe27_wi;
	// synopsys translate_off
	initial
		input_is_nan_dffe3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_nan_dffe3 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_nan_dffe3 <= input_is_nan_dffe3_wi;
	// synopsys translate_off
	initial
		input_is_nan_dffe31 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_nan_dffe31 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_nan_dffe31 <= input_is_nan_dffe31_wi;
	// synopsys translate_off
	initial
		input_is_nan_dffe32 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_nan_dffe32 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_nan_dffe32 <= input_is_nan_dffe32_wi;
	// synopsys translate_off
	initial
		input_is_nan_dffe4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) input_is_nan_dffe4 <= 1'b0;
		else if  (clk_en == 1'b1)   input_is_nan_dffe4 <= input_is_nan_dffe4_wi;
	// synopsys translate_off
	initial
		man_add_sub_res_mag_dffe21 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_add_sub_res_mag_dffe21 <= 55'b0;
		else if  (clk_en == 1'b1)   man_add_sub_res_mag_dffe21 <= man_add_sub_res_mag_dffe21_wi;
	// synopsys translate_off
	initial
		man_add_sub_res_mag_dffe23 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_add_sub_res_mag_dffe23 <= 55'b0;
		else if  (clk_en == 1'b1)   man_add_sub_res_mag_dffe23 <= man_add_sub_res_mag_dffe23_wi;
	// synopsys translate_off
	initial
		man_add_sub_res_mag_dffe27 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_add_sub_res_mag_dffe27 <= 57'b0;
		else if  (clk_en == 1'b1)   man_add_sub_res_mag_dffe27 <= man_add_sub_res_mag_dffe27_wi;
	// synopsys translate_off
	initial
		man_add_sub_res_sign_dffe21 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_add_sub_res_sign_dffe21 <= 1'b0;
		else if  (clk_en == 1'b1)   man_add_sub_res_sign_dffe21 <= man_add_sub_res_sign_dffe27_wo;
	// synopsys translate_off
	initial
		man_add_sub_res_sign_dffe23 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_add_sub_res_sign_dffe23 <= 1'b0;
		else if  (clk_en == 1'b1)   man_add_sub_res_sign_dffe23 <= man_add_sub_res_sign_dffe23_wi;
	// synopsys translate_off
	initial
		man_add_sub_res_sign_dffe27 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_add_sub_res_sign_dffe27 <= 1'b0;
		else if  (clk_en == 1'b1)   man_add_sub_res_sign_dffe27 <= man_add_sub_res_sign_dffe27_wi;
	// synopsys translate_off
	initial
		man_dffe31 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_dffe31 <= 55'b0;
		else if  (clk_en == 1'b1)   man_dffe31 <= man_add_sub_res_mag_dffe26_wo;
	// synopsys translate_off
	initial
		man_leading_zeros_dffe31 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_leading_zeros_dffe31 <= 6'b0;
		else if  (clk_en == 1'b1)   man_leading_zeros_dffe31 <= man_leading_zeros_dffe31_wi;
	// synopsys translate_off
	initial
		man_out_dffe5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_out_dffe5 <= 52'b0;
		else if  (clk_en == 1'b1)   man_out_dffe5 <= man_out_dffe5_wi;
	// synopsys translate_off
	initial
		man_res_dffe4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_res_dffe4 <= 52'b0;
		else if  (clk_en == 1'b1)   man_res_dffe4 <= man_res_dffe4_wi;
	// synopsys translate_off
	initial
		man_res_is_not_zero_dffe3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_res_is_not_zero_dffe3 <= 1'b0;
		else if  (clk_en == 1'b1)   man_res_is_not_zero_dffe3 <= man_res_is_not_zero_dffe3_wi;
	// synopsys translate_off
	initial
		man_res_is_not_zero_dffe31 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_res_is_not_zero_dffe31 <= 1'b0;
		else if  (clk_en == 1'b1)   man_res_is_not_zero_dffe31 <= man_res_is_not_zero_dffe31_wi;
	// synopsys translate_off
	initial
		man_res_is_not_zero_dffe32 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_res_is_not_zero_dffe32 <= 1'b0;
		else if  (clk_en == 1'b1)   man_res_is_not_zero_dffe32 <= man_res_is_not_zero_dffe32_wi;
	// synopsys translate_off
	initial
		man_res_is_not_zero_dffe4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_res_is_not_zero_dffe4 <= 1'b0;
		else if  (clk_en == 1'b1)   man_res_is_not_zero_dffe4 <= man_res_is_not_zero_dffe4_wi;
	// synopsys translate_off
	initial
		man_res_not_zero_dffe23 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_res_not_zero_dffe23 <= 1'b0;
		else if  (clk_en == 1'b1)   man_res_not_zero_dffe23 <= man_res_not_zero_dffe23_wi;
	// synopsys translate_off
	initial
		man_smaller_dffe13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_smaller_dffe13 <= 53'b0;
		else if  (clk_en == 1'b1)   man_smaller_dffe13 <= man_smaller_dffe13_wi;
	// synopsys translate_off
	initial
		need_complement_dffe2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) need_complement_dffe2 <= 1'b0;
		else if  (clk_en == 1'b1)   need_complement_dffe2 <= need_complement_dffe2_wi;
	// synopsys translate_off
	initial
		round_bit_dffe21 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) round_bit_dffe21 <= 1'b0;
		else if  (clk_en == 1'b1)   round_bit_dffe21 <= round_bit_dffe21_wi;
	// synopsys translate_off
	initial
		round_bit_dffe23 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) round_bit_dffe23 <= 1'b0;
		else if  (clk_en == 1'b1)   round_bit_dffe23 <= round_bit_dffe23_wi;
	// synopsys translate_off
	initial
		round_bit_dffe3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) round_bit_dffe3 <= 1'b0;
		else if  (clk_en == 1'b1)   round_bit_dffe3 <= round_bit_dffe3_wi;
	// synopsys translate_off
	initial
		round_bit_dffe31 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) round_bit_dffe31 <= 1'b0;
		else if  (clk_en == 1'b1)   round_bit_dffe31 <= round_bit_dffe31_wi;
	// synopsys translate_off
	initial
		round_bit_dffe32 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) round_bit_dffe32 <= 1'b0;
		else if  (clk_en == 1'b1)   round_bit_dffe32 <= round_bit_dffe32_wi;
	// synopsys translate_off
	initial
		rounded_res_infinity_dffe4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rounded_res_infinity_dffe4 <= 1'b0;
		else if  (clk_en == 1'b1)   rounded_res_infinity_dffe4 <= rounded_res_infinity_dffe4_wi;
	// synopsys translate_off
	initial
		rshift_distance_dffe13 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rshift_distance_dffe13 <= 6'b0;
		else if  (clk_en == 1'b1)   rshift_distance_dffe13 <= rshift_distance_dffe13_wi;
	// synopsys translate_off
	initial
		rshift_distance_dffe14 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rshift_distance_dffe14 <= 6'b0;
		else if  (clk_en == 1'b1)   rshift_distance_dffe14 <= rshift_distance_dffe14_wi;
	// synopsys translate_off
	initial
		sign_dffe31 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_dffe31 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_dffe31 <= sign_dffe31_wi;
	// synopsys translate_off
	initial
		sign_dffe32 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_dffe32 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_dffe32 <= sign_dffe32_wi;
	// synopsys translate_off
	initial
		sign_out_dffe5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_out_dffe5 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_out_dffe5 <= sign_out_dffe5_wi;
	// synopsys translate_off
	initial
		sign_res_dffe3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_res_dffe3 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_res_dffe3 <= sign_res_dffe3_wi;
	// synopsys translate_off
	initial
		sign_res_dffe4 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_res_dffe4 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_res_dffe4 <= sign_res_dffe4_wi;
	// synopsys translate_off
	initial
		sticky_bit_dffe1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sticky_bit_dffe1 <= 1'b0;
		else if  (clk_en == 1'b1)   sticky_bit_dffe1 <= sticky_bit_dffe1_wi;
	// synopsys translate_off
	initial
		sticky_bit_dffe2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sticky_bit_dffe2 <= 1'b0;
		else if  (clk_en == 1'b1)   sticky_bit_dffe2 <= sticky_bit_dffe2_wi;
	// synopsys translate_off
	initial
		sticky_bit_dffe21 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sticky_bit_dffe21 <= 1'b0;
		else if  (clk_en == 1'b1)   sticky_bit_dffe21 <= sticky_bit_dffe21_wi;
	// synopsys translate_off
	initial
		sticky_bit_dffe23 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sticky_bit_dffe23 <= 1'b0;
		else if  (clk_en == 1'b1)   sticky_bit_dffe23 <= sticky_bit_dffe23_wi;
	// synopsys translate_off
	initial
		sticky_bit_dffe27 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sticky_bit_dffe27 <= 1'b0;
		else if  (clk_en == 1'b1)   sticky_bit_dffe27 <= sticky_bit_dffe27_wi;
	// synopsys translate_off
	initial
		sticky_bit_dffe3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sticky_bit_dffe3 <= 1'b0;
		else if  (clk_en == 1'b1)   sticky_bit_dffe3 <= sticky_bit_dffe3_wi;
	// synopsys translate_off
	initial
		sticky_bit_dffe31 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sticky_bit_dffe31 <= 1'b0;
		else if  (clk_en == 1'b1)   sticky_bit_dffe31 <= sticky_bit_dffe31_wi;
	// synopsys translate_off
	initial
		sticky_bit_dffe32 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sticky_bit_dffe32 <= 1'b0;
		else if  (clk_en == 1'b1)   sticky_bit_dffe32 <= sticky_bit_dffe32_wi;
	// synopsys translate_off
	initial
		zero_man_sign_dffe2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_man_sign_dffe2 <= 1'b0;
		else if  (clk_en == 1'b1)   zero_man_sign_dffe2 <= zero_man_sign_dffe2_wi;
	// synopsys translate_off
	initial
		zero_man_sign_dffe21 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_man_sign_dffe21 <= 1'b0;
		else if  (clk_en == 1'b1)   zero_man_sign_dffe21 <= zero_man_sign_dffe21_wi;
	// synopsys translate_off
	initial
		zero_man_sign_dffe23 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_man_sign_dffe23 <= 1'b0;
		else if  (clk_en == 1'b1)   zero_man_sign_dffe23 <= zero_man_sign_dffe23_wi;
	// synopsys translate_off
	initial
		zero_man_sign_dffe27 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) zero_man_sign_dffe27 <= 1'b0;
		else if  (clk_en == 1'b1)   zero_man_sign_dffe27 <= zero_man_sign_dffe27_wi;
	assign
		wire_add_sub1_result_int = wire_add_sub1_dataa - wire_add_sub1_datab;
	//synopsys translate_off
	initial
		wire_add_sub1_pipeline_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_add_sub1_clock or posedge wire_add_sub1_aclr)
		if (wire_add_sub1_aclr == 1'b1) wire_add_sub1_pipeline_dffe_Q <= 12'b0;
		else if (wire_add_sub1_clken == 1'b1) wire_add_sub1_pipeline_dffe_Q <= wire_add_sub1_pipeline_dffe_D;
	assign
		wire_add_sub1_result = wire_add_sub1_pipeline_dffe_Q[11:0],
		wire_add_sub1_pipeline_dffe_D[11:0] = wire_add_sub1_result_int;
	assign
		wire_add_sub1_aclr = aclr,
		wire_add_sub1_clken = clk_en,
		wire_add_sub1_clock = clock,
		wire_add_sub1_dataa = aligned_dataa_exp_w,
		wire_add_sub1_datab = aligned_datab_exp_w;
	assign
		wire_add_sub2_result_int = wire_add_sub2_dataa - wire_add_sub2_datab;
	//synopsys translate_off
	initial
		wire_add_sub2_pipeline_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_add_sub2_clock or posedge wire_add_sub2_aclr)
		if (wire_add_sub2_aclr == 1'b1) wire_add_sub2_pipeline_dffe_Q <= 12'b0;
		else if (wire_add_sub2_clken == 1'b1) wire_add_sub2_pipeline_dffe_Q <= wire_add_sub2_pipeline_dffe_D;
	assign
		wire_add_sub2_result = wire_add_sub2_pipeline_dffe_Q[11:0],
		wire_add_sub2_pipeline_dffe_D[11:0] = wire_add_sub2_result_int;
	assign
		wire_add_sub2_aclr = aclr,
		wire_add_sub2_clken = clk_en,
		wire_add_sub2_clock = clock,
		wire_add_sub2_dataa = aligned_datab_exp_w,
		wire_add_sub2_datab = aligned_dataa_exp_w;
	assign
		wire_add_sub3_result = wire_add_sub3_dataa - wire_add_sub3_datab;
	assign
		wire_add_sub3_dataa = sticky_bit_cnt_dataa_w,
		wire_add_sub3_datab = sticky_bit_cnt_datab_w;
	AlteraAdder_add_sub   add_sub4
	( 
	.aclr(aclr),
	.add_sub(add_sub_w2),
	.cin(borrow_w),
	.clken(clk_en),
	.clock(clock),
	.dataa(man_add_sub_dataa_w),
	.datab(man_add_sub_datab_w),
	.result(wire_add_sub4_result));
	AlteraAdder_add_sub   add_sub5
	( 
	.aclr(aclr),
	.add_sub(add_sub_w2),
	.cin(borrow_w),
	.clken(clk_en),
	.clock(clock),
	.dataa(man_2comp_res_dataa_w),
	.datab(man_2comp_res_datab_w),
	.result(wire_add_sub5_result));
	assign
		wire_add_sub6_result = wire_add_sub6_dataa + wire_add_sub6_datab;
	assign
		wire_add_sub6_dataa = exp_adjustment_add_sub_dataa_w,
		wire_add_sub6_datab = exp_adjustment_add_sub_datab_w;
	assign
		wire_add_sub7_result_int = wire_add_sub7_dataa + wire_add_sub7_datab;
	//synopsys translate_off
	initial
		wire_add_sub7_pipeline_dffe_Q = 0;
	//synopsys translate_on
	always @(posedge wire_add_sub7_clock or posedge wire_add_sub7_aclr)
		if (wire_add_sub7_aclr == 1'b1) wire_add_sub7_pipeline_dffe_Q <= 12'b0;
		else if (wire_add_sub7_clken == 1'b1) wire_add_sub7_pipeline_dffe_Q <= wire_add_sub7_pipeline_dffe_D;
	assign
		wire_add_sub7_result = wire_add_sub7_pipeline_dffe_Q[11:0],
		wire_add_sub7_pipeline_dffe_D[11:0] = wire_add_sub7_result_int;
	assign
		wire_add_sub7_aclr = aclr,
		wire_add_sub7_clken = clk_en,
		wire_add_sub7_clock = clock,
		wire_add_sub7_dataa = exp_adjustment2_add_sub_dataa_w,
		wire_add_sub7_datab = exp_adjustment2_add_sub_datab_w;
	assign
		wire_add_sub8_result = wire_add_sub8_dataa + wire_add_sub8_datab;
	assign
		wire_add_sub8_dataa = man_intermediate_res_w,
		wire_add_sub8_datab = man_res_rounding_add_sub_datab_w;
	assign
		wire_add_sub9_result = wire_add_sub9_dataa + wire_add_sub9_datab;
	assign
		wire_add_sub9_dataa = exp_res_rounding_adder_dataa_w,
		wire_add_sub9_datab = exp_rounding_adjustment_w;
	assign
		wire_trailing_zeros_limit_comparator_dataa_int = {~wire_trailing_zeros_limit_comparator_dataa[6:6], wire_trailing_zeros_limit_comparator_dataa[5:0]},
		wire_trailing_zeros_limit_comparator_datab_int = {~wire_trailing_zeros_limit_comparator_datab[6:6], wire_trailing_zeros_limit_comparator_datab[5:0]};
	always @(wire_trailing_zeros_limit_comparator_dataa_int or wire_trailing_zeros_limit_comparator_datab_int)
	begin
		if (wire_trailing_zeros_limit_comparator_dataa_int > wire_trailing_zeros_limit_comparator_datab_int) 
			begin
				wire_trailing_zeros_limit_comparator_agb_int = 1'b1;
			end
		else
			begin
				wire_trailing_zeros_limit_comparator_agb_int = 1'b0;
			end
	end
	assign
		wire_trailing_zeros_limit_comparator_agb = wire_trailing_zeros_limit_comparator_agb_int;
	assign
		wire_trailing_zeros_limit_comparator_dataa = sticky_bit_cnt_res_w,
		wire_trailing_zeros_limit_comparator_datab = trailing_zeros_limit_w;
	assign
		aclr = 1'b0,
		add_sub_dffe25_wi = add_sub_w2,
		add_sub_dffe25_wo = add_sub_dffe25_wi,
		add_sub_w2 = (~ (dataa_sign_dffe1_wo ^ datab_sign_dffe1_wo)),
		aligned_dataa_exp_dffe12_wi = aligned_dataa_exp_w,
		aligned_dataa_exp_dffe12_wo = aligned_dataa_exp_dffe12,
		aligned_dataa_exp_dffe13_wi = aligned_dataa_exp_dffe12_wo,
		aligned_dataa_exp_dffe13_wo = aligned_dataa_exp_dffe13,
		aligned_dataa_exp_dffe14_wi = aligned_dataa_exp_dffe13_wo,
		aligned_dataa_exp_dffe14_wo = aligned_dataa_exp_dffe14,
		aligned_dataa_exp_dffe15_wi = aligned_dataa_exp_dffe14_wo,
		aligned_dataa_exp_dffe15_wo = aligned_dataa_exp_dffe15_wi,
		aligned_dataa_exp_w = {1'b0, ({11{(~ input_dataa_denormal_dffe11_wo)}} & dataa_dffe11_wo[62:52])},
		aligned_dataa_man_dffe12_wi = aligned_dataa_man_w[54:2],
		aligned_dataa_man_dffe12_wo = aligned_dataa_man_dffe12,
		aligned_dataa_man_dffe13_wi = aligned_dataa_man_dffe12_wo,
		aligned_dataa_man_dffe13_wo = aligned_dataa_man_dffe13,
		aligned_dataa_man_dffe14_wi = aligned_dataa_man_dffe13_wo,
		aligned_dataa_man_dffe14_wo = aligned_dataa_man_dffe14,
		aligned_dataa_man_dffe15_w = {aligned_dataa_man_dffe15_wo, {2{1'b0}}},
		aligned_dataa_man_dffe15_wi = aligned_dataa_man_dffe14_wo,
		aligned_dataa_man_dffe15_wo = aligned_dataa_man_dffe15_wi,
		aligned_dataa_man_w = {(((~ input_dataa_infinite_dffe11_wo) & (~ input_dataa_denormal_dffe11_wo)) & (~ input_dataa_zero_dffe11_wo)), ({52{(~ input_dataa_denormal_dffe11_wo)}} & dataa_dffe11_wo[51:0]), {2{1'b0}}},
		aligned_dataa_sign_dffe12_wi = aligned_dataa_sign_w,
		aligned_dataa_sign_dffe12_wo = aligned_dataa_sign_dffe12,
		aligned_dataa_sign_dffe13_wi = aligned_dataa_sign_dffe12_wo,
		aligned_dataa_sign_dffe13_wo = aligned_dataa_sign_dffe13,
		aligned_dataa_sign_dffe14_wi = aligned_dataa_sign_dffe13_wo,
		aligned_dataa_sign_dffe14_wo = aligned_dataa_sign_dffe14,
		aligned_dataa_sign_dffe15_wi = aligned_dataa_sign_dffe14_wo,
		aligned_dataa_sign_dffe15_wo = aligned_dataa_sign_dffe15_wi,
		aligned_dataa_sign_w = dataa_dffe11_wo[63],
		aligned_datab_exp_dffe12_wi = aligned_datab_exp_w,
		aligned_datab_exp_dffe12_wo = aligned_datab_exp_dffe12,
		aligned_datab_exp_dffe13_wi = aligned_datab_exp_dffe12_wo,
		aligned_datab_exp_dffe13_wo = aligned_datab_exp_dffe13,
		aligned_datab_exp_dffe14_wi = aligned_datab_exp_dffe13_wo,
		aligned_datab_exp_dffe14_wo = aligned_datab_exp_dffe14,
		aligned_datab_exp_dffe15_wi = aligned_datab_exp_dffe14_wo,
		aligned_datab_exp_dffe15_wo = aligned_datab_exp_dffe15_wi,
		aligned_datab_exp_w = {1'b0, ({11{(~ input_datab_denormal_dffe11_wo)}} & datab_dffe11_wo[62:52])},
		aligned_datab_man_dffe12_wi = aligned_datab_man_w[54:2],
		aligned_datab_man_dffe12_wo = aligned_datab_man_dffe12,
		aligned_datab_man_dffe13_wi = aligned_datab_man_dffe12_wo,
		aligned_datab_man_dffe13_wo = aligned_datab_man_dffe13,
		aligned_datab_man_dffe14_wi = aligned_datab_man_dffe13_wo,
		aligned_datab_man_dffe14_wo = aligned_datab_man_dffe14,
		aligned_datab_man_dffe15_w = {aligned_datab_man_dffe15_wo, {2{1'b0}}},
		aligned_datab_man_dffe15_wi = aligned_datab_man_dffe14_wo,
		aligned_datab_man_dffe15_wo = aligned_datab_man_dffe15_wi,
		aligned_datab_man_w = {(((~ input_datab_infinite_dffe11_wo) & (~ input_datab_denormal_dffe11_wo)) & (~ input_datab_zero_dffe11_wo)), ({52{(~ input_datab_denormal_dffe11_wo)}} & datab_dffe11_wo[51:0]), {2{1'b0}}},
		aligned_datab_sign_dffe12_wi = aligned_datab_sign_w,
		aligned_datab_sign_dffe12_wo = aligned_datab_sign_dffe12,
		aligned_datab_sign_dffe13_wi = aligned_datab_sign_dffe12_wo,
		aligned_datab_sign_dffe13_wo = aligned_datab_sign_dffe13,
		aligned_datab_sign_dffe14_wi = aligned_datab_sign_dffe13_wo,
		aligned_datab_sign_dffe14_wo = aligned_datab_sign_dffe14,
		aligned_datab_sign_dffe15_wi = aligned_datab_sign_dffe14_wo,
		aligned_datab_sign_dffe15_wo = aligned_datab_sign_dffe15_wi,
		aligned_datab_sign_w = datab_dffe11_wo[63],
		borrow_w = ((~ sticky_bit_dffe1_wo) & (~ add_sub_w2)),
		both_inputs_are_infinite_dffe1_wi = (input_dataa_infinite_dffe15_wo & input_datab_infinite_dffe15_wo),
		both_inputs_are_infinite_dffe1_wo = both_inputs_are_infinite_dffe1,
		both_inputs_are_infinite_dffe25_wi = both_inputs_are_infinite_dffe1_wo,
		both_inputs_are_infinite_dffe25_wo = both_inputs_are_infinite_dffe25_wi,
		clk_en = 1'b1,
		data_exp_dffe1_wi = (({11{(~ exp_amb_mux_dffe15_wo)}} & aligned_dataa_exp_dffe15_wo[10:0]) | ({11{exp_amb_mux_dffe15_wo}} & aligned_datab_exp_dffe15_wo[10:0])),
		data_exp_dffe1_wo = data_exp_dffe1,
		dataa_dffe11_wi = dataa,
		dataa_dffe11_wo = dataa_dffe11,
		dataa_man_dffe1_wi = (({55{(~ exp_amb_mux_dffe15_wo)}} & aligned_dataa_man_dffe15_w) | ({55{exp_amb_mux_dffe15_wo}} & wire_rbarrel_shift_result)),
		dataa_man_dffe1_wo = dataa_man_dffe1,
		dataa_sign_dffe1_wi = aligned_dataa_sign_dffe15_wo,
		dataa_sign_dffe1_wo = dataa_sign_dffe1,
		dataa_sign_dffe25_wi = dataa_sign_dffe1_wo,
		dataa_sign_dffe25_wo = dataa_sign_dffe25_wi,
		datab_dffe11_wi = datab,
		datab_dffe11_wo = datab_dffe11,
		datab_man_dffe1_wi = (({55{(~ exp_amb_mux_dffe15_wo)}} & wire_rbarrel_shift_result) | ({55{exp_amb_mux_dffe15_wo}} & aligned_datab_man_dffe15_w)),
		datab_man_dffe1_wo = datab_man_dffe1,
		datab_sign_dffe1_wi = aligned_datab_sign_dffe15_wo,
		datab_sign_dffe1_wo = datab_sign_dffe1,
		denormal_flag_w = ((((~ force_nan_w) & (~ force_infinity_w)) & (~ force_zero_w)) & denormal_res_dffe4_wo),
		denormal_res_dffe32_wi = denormal_result_w,
		denormal_res_dffe32_wo = denormal_res_dffe32,
		denormal_res_dffe33_wi = denormal_res_dffe32_wo,
		denormal_res_dffe33_wo = denormal_res_dffe33_wi,
		denormal_res_dffe3_wi = denormal_res_dffe33_wo,
		denormal_res_dffe3_wo = denormal_res_dffe3,
		denormal_res_dffe41_wi = denormal_res_dffe42_wo,
		denormal_res_dffe41_wo = denormal_res_dffe41_wi,
		denormal_res_dffe42_wi = denormal_res_dffe3_wo,
		denormal_res_dffe42_wo = denormal_res_dffe42_wi,
		denormal_res_dffe4_wi = denormal_res_dffe41_wo,
		denormal_res_dffe4_wo = denormal_res_dffe4,
		denormal_result_w = ((~ exp_res_not_zero_w[11]) | exp_adjustment2_add_sub_w[11]),
		exp_a_all_one_w = {(dataa[62] & exp_a_all_one_w[9]), (dataa[61] & exp_a_all_one_w[8]), (dataa[60] & exp_a_all_one_w[7]), (dataa[59] & exp_a_all_one_w[6]), (dataa[58] & exp_a_all_one_w[5]), (dataa[57] & exp_a_all_one_w[4]), (dataa[56] & exp_a_all_one_w[3]), (dataa[55] & exp_a_all_one_w[2]), (dataa[54] & exp_a_all_one_w[1]), (dataa[53] & exp_a_all_one_w[0]), dataa[52]},
		exp_a_not_zero_w = {(dataa[62] | exp_a_not_zero_w[9]), (dataa[61] | exp_a_not_zero_w[8]), (dataa[60] | exp_a_not_zero_w[7]), (dataa[59] | exp_a_not_zero_w[6]), (dataa[58] | exp_a_not_zero_w[5]), (dataa[57] | exp_a_not_zero_w[4]), (dataa[56] | exp_a_not_zero_w[3]), (dataa[55] | exp_a_not_zero_w[2]), (dataa[54] | exp_a_not_zero_w[1]), (dataa[53] | exp_a_not_zero_w[0]), dataa[52]},
		exp_adj_0pads = {10{1'b0}},
		exp_adj_dffe21_wi = (({2{man_add_sub_res_mag_dffe27_wo[55]}} & exp_adjust_by_add2) | ({2{(~ man_add_sub_res_mag_dffe27_wo[55])}} & exp_adjust_by_add1)),
		exp_adj_dffe21_wo = exp_adj_dffe21,
		exp_adj_dffe23_wi = exp_adj_dffe21_wo,
		exp_adj_dffe23_wo = exp_adj_dffe23,
		exp_adj_dffe26_wi = exp_adj_dffe23_wo,
		exp_adj_dffe26_wo = exp_adj_dffe26_wi,
		exp_adjust_by_add1 = 2'b01,
		exp_adjust_by_add2 = 2'b10,
		exp_adjustment2_add_sub_dataa_w = exp_value,
		exp_adjustment2_add_sub_datab_w = exp_adjustment_add_sub_w,
		exp_adjustment2_add_sub_w = wire_add_sub7_result,
		exp_adjustment_add_sub_dataa_w = {priority_encoder_1pads_w, wire_leading_zeroes_cnt_q},
		exp_adjustment_add_sub_datab_w = {exp_adj_0pads, exp_adj_dffe26_wo},
		exp_adjustment_add_sub_w = wire_add_sub6_result,
		exp_all_ones_w = {11{1'b1}},
		exp_all_zeros_w = {11{1'b0}},
		exp_amb_mux_dffe13_wi = exp_amb_mux_w,
		exp_amb_mux_dffe13_wo = exp_amb_mux_dffe13,
		exp_amb_mux_dffe14_wi = exp_amb_mux_dffe13_wo,
		exp_amb_mux_dffe14_wo = exp_amb_mux_dffe14,
		exp_amb_mux_dffe15_wi = exp_amb_mux_dffe14_wo,
		exp_amb_mux_dffe15_wo = exp_amb_mux_dffe15_wi,
		exp_amb_mux_w = exp_amb_w[11],
		exp_amb_w = wire_add_sub1_result,
		exp_b_all_one_w = {(datab[62] & exp_b_all_one_w[9]), (datab[61] & exp_b_all_one_w[8]), (datab[60] & exp_b_all_one_w[7]), (datab[59] & exp_b_all_one_w[6]), (datab[58] & exp_b_all_one_w[5]), (datab[57] & exp_b_all_one_w[4]), (datab[56] & exp_b_all_one_w[3]), (datab[55] & exp_b_all_one_w[2]), (datab[54] & exp_b_all_one_w[1]), (datab[53] & exp_b_all_one_w[0]), datab[52]},
		exp_b_not_zero_w = {(datab[62] | exp_b_not_zero_w[9]), (datab[61] | exp_b_not_zero_w[8]), (datab[60] | exp_b_not_zero_w[7]), (datab[59] | exp_b_not_zero_w[6]), (datab[58] | exp_b_not_zero_w[5]), (datab[57] | exp_b_not_zero_w[4]), (datab[56] | exp_b_not_zero_w[3]), (datab[55] | exp_b_not_zero_w[2]), (datab[54] | exp_b_not_zero_w[1]), (datab[53] | exp_b_not_zero_w[0]), datab[52]},
		exp_bma_w = wire_add_sub2_result,
		exp_diff_abs_exceed_max_w = {(exp_diff_abs_exceed_max_w[3] | exp_diff_abs_w[10]), (exp_diff_abs_exceed_max_w[2] | exp_diff_abs_w[9]), (exp_diff_abs_exceed_max_w[1] | exp_diff_abs_w[8]), (exp_diff_abs_exceed_max_w[0] | exp_diff_abs_w[7]), exp_diff_abs_w[6]},
		exp_diff_abs_max_w = {6{1'b1}},
		exp_diff_abs_w = (({11{(~ exp_amb_mux_w)}} & exp_amb_w[10:0]) | ({11{exp_amb_mux_w}} & exp_bma_w[10:0])),
		exp_intermediate_res_dffe41_wi = exp_intermediate_res_dffe42_wo,
		exp_intermediate_res_dffe41_wo = exp_intermediate_res_dffe41_wi,
		exp_intermediate_res_dffe42_wi = exp_intermediate_res_w,
		exp_intermediate_res_dffe42_wo = exp_intermediate_res_dffe42_wi,
		exp_intermediate_res_w = exp_res_dffe3_wo,
		exp_out_dffe5_wi = (({11{force_nan_w}} & exp_all_ones_w) | ({11{(~ force_nan_w)}} & (({11{force_infinity_w}} & exp_all_ones_w) | ({11{(~ force_infinity_w)}} & (({11{(force_zero_w | denormal_flag_w)}} & exp_all_zeros_w) | ({11{(~ (force_zero_w | denormal_flag_w))}} & exp_res_dffe4_wo)))))),
		exp_out_dffe5_wo = exp_out_dffe5,
		exp_res_dffe21_wi = exp_res_dffe27_wo,
		exp_res_dffe21_wo = exp_res_dffe21,
		exp_res_dffe22_wi = exp_res_dffe2_wo,
		exp_res_dffe22_wo = exp_res_dffe22_wi,
		exp_res_dffe23_wi = exp_res_dffe21_wo,
		exp_res_dffe23_wo = exp_res_dffe23,
		exp_res_dffe25_wi = data_exp_dffe1_wo,
		exp_res_dffe25_wo = exp_res_dffe25_wi,
		exp_res_dffe26_wi = exp_res_dffe23_wo,
		exp_res_dffe26_wo = exp_res_dffe26_wi,
		exp_res_dffe27_wi = exp_res_dffe22_wo,
		exp_res_dffe27_wo = exp_res_dffe27,
		exp_res_dffe2_wi = exp_res_dffe25_wo,
		exp_res_dffe2_wo = exp_res_dffe2,
		exp_res_dffe32_wi = ({11{(~ denormal_result_w)}} & exp_adjustment2_add_sub_w[10:0]),
		exp_res_dffe32_wo = exp_res_dffe32,
		exp_res_dffe33_wi = exp_res_dffe32_wo,
		exp_res_dffe33_wo = exp_res_dffe33_wi,
		exp_res_dffe3_wi = exp_res_dffe33_wo,
		exp_res_dffe3_wo = exp_res_dffe3,
		exp_res_dffe4_wi = exp_rounded_res_w,
		exp_res_dffe4_wo = exp_res_dffe4,
		exp_res_max_w = {(exp_res_max_w[9] & exp_adjustment2_add_sub_w[10]), (exp_res_max_w[8] & exp_adjustment2_add_sub_w[9]), (exp_res_max_w[7] & exp_adjustment2_add_sub_w[8]), (exp_res_max_w[6] & exp_adjustment2_add_sub_w[7]), (exp_res_max_w[5] & exp_adjustment2_add_sub_w[6]), (exp_res_max_w[4] & exp_adjustment2_add_sub_w[5]), (exp_res_max_w[3] & exp_adjustment2_add_sub_w[4]), (exp_res_max_w[2] & exp_adjustment2_add_sub_w[3]), (exp_res_max_w[1] & exp_adjustment2_add_sub_w[2]), (exp_res_max_w[0] & exp_adjustment2_add_sub_w[1]), exp_adjustment2_add_sub_w[0]},
		exp_res_not_zero_w = {(exp_res_not_zero_w[10] | exp_adjustment2_add_sub_w[11]), (exp_res_not_zero_w[9] | exp_adjustment2_add_sub_w[10]), (exp_res_not_zero_w[8] | exp_adjustment2_add_sub_w[9]), (exp_res_not_zero_w[7] | exp_adjustment2_add_sub_w[8]), (exp_res_not_zero_w[6] | exp_adjustment2_add_sub_w[7]), (exp_res_not_zero_w[5] | exp_adjustment2_add_sub_w[6]), (exp_res_not_zero_w[4] | exp_adjustment2_add_sub_w[5]), (exp_res_not_zero_w[3] | exp_adjustment2_add_sub_w[4]), (exp_res_not_zero_w[2] | exp_adjustment2_add_sub_w[3]), (exp_res_not_zero_w[1] | exp_adjustment2_add_sub_w[2]), (exp_res_not_zero_w[0] | exp_adjustment2_add_sub_w[1]), exp_adjustment2_add_sub_w[0]},
		exp_res_rounding_adder_dataa_w = {1'b0, exp_intermediate_res_dffe41_wo},
		exp_res_rounding_adder_w = wire_add_sub9_result,
		exp_rounded_res_infinity_w = exp_rounded_res_max_w[10],
		exp_rounded_res_max_w = {(exp_rounded_res_max_w[9] & exp_rounded_res_w[10]), (exp_rounded_res_max_w[8] & exp_rounded_res_w[9]), (exp_rounded_res_max_w[7] & exp_rounded_res_w[8]), (exp_rounded_res_max_w[6] & exp_rounded_res_w[7]), (exp_rounded_res_max_w[5] & exp_rounded_res_w[6]), (exp_rounded_res_max_w[4] & exp_rounded_res_w[5]), (exp_rounded_res_max_w[3] & exp_rounded_res_w[4]), (exp_rounded_res_max_w[2] & exp_rounded_res_w[3]), (exp_rounded_res_max_w[1] & exp_rounded_res_w[2]), (exp_rounded_res_max_w[0] & exp_rounded_res_w[1]), exp_rounded_res_w[0]},
		exp_rounded_res_w = exp_res_rounding_adder_w[10:0],
		exp_rounding_adjustment_w = {{11{1'b0}}, man_res_rounding_add_sub_w[53]},
		exp_value = {1'b0, exp_res_dffe26_wo},
		force_infinity_w = ((input_is_infinite_dffe4_wo | rounded_res_infinity_dffe4_wo) | infinite_res_dffe4_wo),
		force_nan_w = (infinity_magnitude_sub_dffe4_wo | input_is_nan_dffe4_wo),
		force_zero_w = (~ man_res_is_not_zero_dffe4_wo),
		guard_bit_dffe3_wo = man_res_w3[0],
		infinite_output_sign_dffe1_wi = (((~ input_datab_infinite_dffe15_wo) & aligned_dataa_sign_dffe15_wo) | (input_datab_infinite_dffe15_wo & aligned_datab_sign_dffe15_wo)),
		infinite_output_sign_dffe1_wo = infinite_output_sign_dffe1,
		infinite_output_sign_dffe21_wi = infinite_output_sign_dffe27_wo,
		infinite_output_sign_dffe21_wo = infinite_output_sign_dffe21,
		infinite_output_sign_dffe22_wi = infinite_output_sign_dffe2_wo,
		infinite_output_sign_dffe22_wo = infinite_output_sign_dffe22_wi,
		infinite_output_sign_dffe23_wi = infinite_output_sign_dffe21_wo,
		infinite_output_sign_dffe23_wo = infinite_output_sign_dffe23,
		infinite_output_sign_dffe25_wi = infinite_output_sign_dffe1_wo,
		infinite_output_sign_dffe25_wo = infinite_output_sign_dffe25_wi,
		infinite_output_sign_dffe26_wi = infinite_output_sign_dffe23_wo,
		infinite_output_sign_dffe26_wo = infinite_output_sign_dffe26_wi,
		infinite_output_sign_dffe27_wi = infinite_output_sign_dffe22_wo,
		infinite_output_sign_dffe27_wo = infinite_output_sign_dffe27,
		infinite_output_sign_dffe2_wi = infinite_output_sign_dffe25_wo,
		infinite_output_sign_dffe2_wo = infinite_output_sign_dffe2,
		infinite_output_sign_dffe31_wi = infinite_output_sign_dffe26_wo,
		infinite_output_sign_dffe31_wo = infinite_output_sign_dffe31,
		infinite_output_sign_dffe32_wi = infinite_output_sign_dffe31_wo,
		infinite_output_sign_dffe32_wo = infinite_output_sign_dffe32,
		infinite_output_sign_dffe33_wi = infinite_output_sign_dffe32_wo,
		infinite_output_sign_dffe33_wo = infinite_output_sign_dffe33_wi,
		infinite_output_sign_dffe3_wi = infinite_output_sign_dffe33_wo,
		infinite_output_sign_dffe3_wo = infinite_output_sign_dffe3,
		infinite_output_sign_dffe41_wi = infinite_output_sign_dffe42_wo,
		infinite_output_sign_dffe41_wo = infinite_output_sign_dffe41_wi,
		infinite_output_sign_dffe42_wi = infinite_output_sign_dffe3_wo,
		infinite_output_sign_dffe42_wo = infinite_output_sign_dffe42_wi,
		infinite_output_sign_dffe4_wi = infinite_output_sign_dffe41_wo,
		infinite_output_sign_dffe4_wo = infinite_output_sign_dffe4,
		infinite_res_dff32_wi = (exp_res_max_w[10] & (~ exp_adjustment2_add_sub_w[11])),
		infinite_res_dff32_wo = infinite_res_dffe32,
		infinite_res_dff33_wi = infinite_res_dff32_wo,
		infinite_res_dff33_wo = infinite_res_dff33_wi,
		infinite_res_dffe3_wi = infinite_res_dff33_wo,
		infinite_res_dffe3_wo = infinite_res_dffe3,
		infinite_res_dffe41_wi = infinite_res_dffe42_wo,
		infinite_res_dffe41_wo = infinite_res_dffe41_wi,
		infinite_res_dffe42_wi = infinite_res_dffe3_wo,
		infinite_res_dffe42_wo = infinite_res_dffe42_wi,
		infinite_res_dffe4_wi = infinite_res_dffe41_wo,
		infinite_res_dffe4_wo = infinite_res_dffe4,
		infinity_magnitude_sub_dffe21_wi = infinity_magnitude_sub_dffe27_wo,
		infinity_magnitude_sub_dffe21_wo = infinity_magnitude_sub_dffe21,
		infinity_magnitude_sub_dffe22_wi = infinity_magnitude_sub_dffe2_wo,
		infinity_magnitude_sub_dffe22_wo = infinity_magnitude_sub_dffe22_wi,
		infinity_magnitude_sub_dffe23_wi = infinity_magnitude_sub_dffe21_wo,
		infinity_magnitude_sub_dffe23_wo = infinity_magnitude_sub_dffe23,
		infinity_magnitude_sub_dffe26_wi = infinity_magnitude_sub_dffe23_wo,
		infinity_magnitude_sub_dffe26_wo = infinity_magnitude_sub_dffe26_wi,
		infinity_magnitude_sub_dffe27_wi = infinity_magnitude_sub_dffe22_wo,
		infinity_magnitude_sub_dffe27_wo = infinity_magnitude_sub_dffe27,
		infinity_magnitude_sub_dffe2_wi = ((~ add_sub_dffe25_wo) & both_inputs_are_infinite_dffe25_wo),
		infinity_magnitude_sub_dffe2_wo = infinity_magnitude_sub_dffe2,
		infinity_magnitude_sub_dffe31_wi = infinity_magnitude_sub_dffe26_wo,
		infinity_magnitude_sub_dffe31_wo = infinity_magnitude_sub_dffe31,
		infinity_magnitude_sub_dffe32_wi = infinity_magnitude_sub_dffe31_wo,
		infinity_magnitude_sub_dffe32_wo = infinity_magnitude_sub_dffe32,
		infinity_magnitude_sub_dffe33_wi = infinity_magnitude_sub_dffe32_wo,
		infinity_magnitude_sub_dffe33_wo = infinity_magnitude_sub_dffe33_wi,
		infinity_magnitude_sub_dffe3_wi = infinity_magnitude_sub_dffe33_wo,
		infinity_magnitude_sub_dffe3_wo = infinity_magnitude_sub_dffe3,
		infinity_magnitude_sub_dffe41_wi = infinity_magnitude_sub_dffe42_wo,
		infinity_magnitude_sub_dffe41_wo = infinity_magnitude_sub_dffe41_wi,
		infinity_magnitude_sub_dffe42_wi = infinity_magnitude_sub_dffe3_wo,
		infinity_magnitude_sub_dffe42_wo = infinity_magnitude_sub_dffe42_wi,
		infinity_magnitude_sub_dffe4_wi = infinity_magnitude_sub_dffe41_wo,
		infinity_magnitude_sub_dffe4_wo = infinity_magnitude_sub_dffe4,
		input_dataa_denormal_dffe11_wi = input_dataa_denormal_w,
		input_dataa_denormal_dffe11_wo = input_dataa_denormal_dffe11,
		input_dataa_denormal_w = ((~ exp_a_not_zero_w[10]) & man_a_not_zero_w[51]),
		input_dataa_infinite_dffe11_wi = input_dataa_infinite_w,
		input_dataa_infinite_dffe11_wo = input_dataa_infinite_dffe11,
		input_dataa_infinite_dffe12_wi = input_dataa_infinite_dffe11_wo,
		input_dataa_infinite_dffe12_wo = input_dataa_infinite_dffe12,
		input_dataa_infinite_dffe13_wi = input_dataa_infinite_dffe12_wo,
		input_dataa_infinite_dffe13_wo = input_dataa_infinite_dffe13,
		input_dataa_infinite_dffe14_wi = input_dataa_infinite_dffe13_wo,
		input_dataa_infinite_dffe14_wo = input_dataa_infinite_dffe14,
		input_dataa_infinite_dffe15_wi = input_dataa_infinite_dffe14_wo,
		input_dataa_infinite_dffe15_wo = input_dataa_infinite_dffe15_wi,
		input_dataa_infinite_w = (exp_a_all_one_w[10] & (~ man_a_not_zero_w[51])),
		input_dataa_nan_dffe11_wi = input_dataa_nan_w,
		input_dataa_nan_dffe11_wo = input_dataa_nan_dffe11,
		input_dataa_nan_dffe12_wi = input_dataa_nan_dffe11_wo,
		input_dataa_nan_dffe12_wo = input_dataa_nan_dffe12,
		input_dataa_nan_w = (exp_a_all_one_w[10] & man_a_not_zero_w[51]),
		input_dataa_zero_dffe11_wi = input_dataa_zero_w,
		input_dataa_zero_dffe11_wo = input_dataa_zero_dffe11,
		input_dataa_zero_w = ((~ exp_a_not_zero_w[10]) & (~ man_a_not_zero_w[51])),
		input_datab_denormal_dffe11_wi = input_datab_denormal_w,
		input_datab_denormal_dffe11_wo = input_datab_denormal_dffe11,
		input_datab_denormal_w = ((~ exp_b_not_zero_w[10]) & man_b_not_zero_w[51]),
		input_datab_infinite_dffe11_wi = input_datab_infinite_w,
		input_datab_infinite_dffe11_wo = input_datab_infinite_dffe11,
		input_datab_infinite_dffe12_wi = input_datab_infinite_dffe11_wo,
		input_datab_infinite_dffe12_wo = input_datab_infinite_dffe12,
		input_datab_infinite_dffe13_wi = input_datab_infinite_dffe12_wo,
		input_datab_infinite_dffe13_wo = input_datab_infinite_dffe13,
		input_datab_infinite_dffe14_wi = input_datab_infinite_dffe13_wo,
		input_datab_infinite_dffe14_wo = input_datab_infinite_dffe14,
		input_datab_infinite_dffe15_wi = input_datab_infinite_dffe14_wo,
		input_datab_infinite_dffe15_wo = input_datab_infinite_dffe15_wi,
		input_datab_infinite_w = (exp_b_all_one_w[10] & (~ man_b_not_zero_w[51])),
		input_datab_nan_dffe11_wi = input_datab_nan_w,
		input_datab_nan_dffe11_wo = input_datab_nan_dffe11,
		input_datab_nan_dffe12_wi = input_datab_nan_dffe11_wo,
		input_datab_nan_dffe12_wo = input_datab_nan_dffe12,
		input_datab_nan_w = (exp_b_all_one_w[10] & man_b_not_zero_w[51]),
		input_datab_zero_dffe11_wi = input_datab_zero_w,
		input_datab_zero_dffe11_wo = input_datab_zero_dffe11,
		input_datab_zero_w = ((~ exp_b_not_zero_w[10]) & (~ man_b_not_zero_w[51])),
		input_is_infinite_dffe1_wi = (input_dataa_infinite_dffe15_wo | input_datab_infinite_dffe15_wo),
		input_is_infinite_dffe1_wo = input_is_infinite_dffe1,
		input_is_infinite_dffe21_wi = input_is_infinite_dffe27_wo,
		input_is_infinite_dffe21_wo = input_is_infinite_dffe21,
		input_is_infinite_dffe22_wi = input_is_infinite_dffe2_wo,
		input_is_infinite_dffe22_wo = input_is_infinite_dffe22_wi,
		input_is_infinite_dffe23_wi = input_is_infinite_dffe21_wo,
		input_is_infinite_dffe23_wo = input_is_infinite_dffe23,
		input_is_infinite_dffe25_wi = input_is_infinite_dffe1_wo,
		input_is_infinite_dffe25_wo = input_is_infinite_dffe25_wi,
		input_is_infinite_dffe26_wi = input_is_infinite_dffe23_wo,
		input_is_infinite_dffe26_wo = input_is_infinite_dffe26_wi,
		input_is_infinite_dffe27_wi = input_is_infinite_dffe22_wo,
		input_is_infinite_dffe27_wo = input_is_infinite_dffe27,
		input_is_infinite_dffe2_wi = input_is_infinite_dffe25_wo,
		input_is_infinite_dffe2_wo = input_is_infinite_dffe2,
		input_is_infinite_dffe31_wi = input_is_infinite_dffe26_wo,
		input_is_infinite_dffe31_wo = input_is_infinite_dffe31,
		input_is_infinite_dffe32_wi = input_is_infinite_dffe31_wo,
		input_is_infinite_dffe32_wo = input_is_infinite_dffe32,
		input_is_infinite_dffe33_wi = input_is_infinite_dffe32_wo,
		input_is_infinite_dffe33_wo = input_is_infinite_dffe33_wi,
		input_is_infinite_dffe3_wi = input_is_infinite_dffe33_wo,
		input_is_infinite_dffe3_wo = input_is_infinite_dffe3,
		input_is_infinite_dffe41_wi = input_is_infinite_dffe42_wo,
		input_is_infinite_dffe41_wo = input_is_infinite_dffe41_wi,
		input_is_infinite_dffe42_wi = input_is_infinite_dffe3_wo,
		input_is_infinite_dffe42_wo = input_is_infinite_dffe42_wi,
		input_is_infinite_dffe4_wi = input_is_infinite_dffe41_wo,
		input_is_infinite_dffe4_wo = input_is_infinite_dffe4,
		input_is_nan_dffe13_wi = (input_dataa_nan_dffe12_wo | input_datab_nan_dffe12_wo),
		input_is_nan_dffe13_wo = input_is_nan_dffe13,
		input_is_nan_dffe14_wi = input_is_nan_dffe13_wo,
		input_is_nan_dffe14_wo = input_is_nan_dffe14,
		input_is_nan_dffe15_wi = input_is_nan_dffe14_wo,
		input_is_nan_dffe15_wo = input_is_nan_dffe15_wi,
		input_is_nan_dffe1_wi = input_is_nan_dffe15_wo,
		input_is_nan_dffe1_wo = input_is_nan_dffe1,
		input_is_nan_dffe21_wi = input_is_nan_dffe27_wo,
		input_is_nan_dffe21_wo = input_is_nan_dffe21,
		input_is_nan_dffe22_wi = input_is_nan_dffe2_wo,
		input_is_nan_dffe22_wo = input_is_nan_dffe22_wi,
		input_is_nan_dffe23_wi = input_is_nan_dffe21_wo,
		input_is_nan_dffe23_wo = input_is_nan_dffe23,
		input_is_nan_dffe25_wi = input_is_nan_dffe1_wo,
		input_is_nan_dffe25_wo = input_is_nan_dffe25_wi,
		input_is_nan_dffe26_wi = input_is_nan_dffe23_wo,
		input_is_nan_dffe26_wo = input_is_nan_dffe26_wi,
		input_is_nan_dffe27_wi = input_is_nan_dffe22_wo,
		input_is_nan_dffe27_wo = input_is_nan_dffe27,
		input_is_nan_dffe2_wi = input_is_nan_dffe25_wo,
		input_is_nan_dffe2_wo = input_is_nan_dffe2,
		input_is_nan_dffe31_wi = input_is_nan_dffe26_wo,
		input_is_nan_dffe31_wo = input_is_nan_dffe31,
		input_is_nan_dffe32_wi = input_is_nan_dffe31_wo,
		input_is_nan_dffe32_wo = input_is_nan_dffe32,
		input_is_nan_dffe33_wi = input_is_nan_dffe32_wo,
		input_is_nan_dffe33_wo = input_is_nan_dffe33_wi,
		input_is_nan_dffe3_wi = input_is_nan_dffe33_wo,
		input_is_nan_dffe3_wo = input_is_nan_dffe3,
		input_is_nan_dffe41_wi = input_is_nan_dffe42_wo,
		input_is_nan_dffe41_wo = input_is_nan_dffe41_wi,
		input_is_nan_dffe42_wi = input_is_nan_dffe3_wo,
		input_is_nan_dffe42_wo = input_is_nan_dffe42_wi,
		input_is_nan_dffe4_wi = input_is_nan_dffe41_wo,
		input_is_nan_dffe4_wo = input_is_nan_dffe4,
		man_2comp_res_dataa_w = {pos_sign_bit_ext, datab_man_dffe1_wo},
		man_2comp_res_datab_w = {pos_sign_bit_ext, dataa_man_dffe1_wo},
		man_2comp_res_w = wire_add_sub5_result,
		man_a_not_zero_w = {(dataa[51] | man_a_not_zero_w[50]), (dataa[50] | man_a_not_zero_w[49]), (dataa[49] | man_a_not_zero_w[48]), (dataa[48] | man_a_not_zero_w[47]), (dataa[47] | man_a_not_zero_w[46]), (dataa[46] | man_a_not_zero_w[45]), (dataa[45] | man_a_not_zero_w[44]), (dataa[44] | man_a_not_zero_w[43]), (dataa[43] | man_a_not_zero_w[42]), (dataa[42] | man_a_not_zero_w[41]), (dataa[41] | man_a_not_zero_w[40]), (dataa[40] | man_a_not_zero_w[39]), (dataa[39] | man_a_not_zero_w[38]), (dataa[38] | man_a_not_zero_w[37]), (dataa[37] | man_a_not_zero_w[36]), (dataa[36] | man_a_not_zero_w[35]), (dataa[35] | man_a_not_zero_w[34]), (dataa[34] | man_a_not_zero_w[33]), (dataa[33] | man_a_not_zero_w[32]), (dataa[32] | man_a_not_zero_w[31]), (dataa[31] | man_a_not_zero_w[30]), (dataa[30] | man_a_not_zero_w[29]), (dataa[29] | man_a_not_zero_w[28]), (dataa[28] | man_a_not_zero_w[27]), (dataa[27] | man_a_not_zero_w[26]), (dataa[26] | man_a_not_zero_w[25]), (dataa[25] | man_a_not_zero_w[24]), (dataa[24] | man_a_not_zero_w[23]), (dataa[23] | man_a_not_zero_w[22]), (dataa[22] | man_a_not_zero_w[21]), (dataa[21] | man_a_not_zero_w[20]), (dataa[20] | man_a_not_zero_w[19]), (dataa[19] | man_a_not_zero_w[18]), (dataa[18] | man_a_not_zero_w[17]), (dataa[17] | man_a_not_zero_w[16]), (dataa[16] | man_a_not_zero_w[15]), (dataa[15] | man_a_not_zero_w[14]), (dataa[14] | man_a_not_zero_w[13]), (dataa[13] | man_a_not_zero_w[12]), (dataa[12] | man_a_not_zero_w[11]), (dataa[11] | man_a_not_zero_w[10]), (dataa[10] | man_a_not_zero_w[9]), (dataa[9] | man_a_not_zero_w[8]), (dataa[8] | man_a_not_zero_w[7]), (dataa[7] | man_a_not_zero_w[6]), (dataa[6] | man_a_not_zero_w[5]), (dataa[5] | man_a_not_zero_w[4]), (dataa[4] | man_a_not_zero_w[3]), (dataa[3] | man_a_not_zero_w[2]), (dataa[2] | man_a_not_zero_w[1]), (dataa[1] | man_a_not_zero_w[0]), dataa[0]},
		man_add_sub_dataa_w = {pos_sign_bit_ext, dataa_man_dffe1_wo},
		man_add_sub_datab_w = {pos_sign_bit_ext, datab_man_dffe1_wo},
		man_add_sub_res_mag_dffe21_wi = man_res_mag_w2,
		man_add_sub_res_mag_dffe21_wo = man_add_sub_res_mag_dffe21,
		man_add_sub_res_mag_dffe23_wi = man_add_sub_res_mag_dffe21_wo,
		man_add_sub_res_mag_dffe23_wo = man_add_sub_res_mag_dffe23,
		man_add_sub_res_mag_dffe26_wi = man_add_sub_res_mag_dffe23_wo,
		man_add_sub_res_mag_dffe26_wo = man_add_sub_res_mag_dffe26_wi,
		man_add_sub_res_mag_dffe27_wi = man_add_sub_res_mag_w2,
		man_add_sub_res_mag_dffe27_wo = man_add_sub_res_mag_dffe27,
		man_add_sub_res_mag_w2 = (({57{man_add_sub_w[56]}} & man_2comp_res_w) | ({57{(~ man_add_sub_w[56])}} & man_add_sub_w)),
		man_add_sub_res_sign_dffe21_wo = man_add_sub_res_sign_dffe21,
		man_add_sub_res_sign_dffe23_wi = man_add_sub_res_sign_dffe21_wo,
		man_add_sub_res_sign_dffe23_wo = man_add_sub_res_sign_dffe23,
		man_add_sub_res_sign_dffe26_wi = man_add_sub_res_sign_dffe23_wo,
		man_add_sub_res_sign_dffe26_wo = man_add_sub_res_sign_dffe26_wi,
		man_add_sub_res_sign_dffe27_wi = man_add_sub_res_sign_w2,
		man_add_sub_res_sign_dffe27_wo = man_add_sub_res_sign_dffe27,
		man_add_sub_res_sign_w2 = ((need_complement_dffe22_wo & (~ man_add_sub_w[56])) | ((~ need_complement_dffe22_wo) & man_add_sub_w[56])),
		man_add_sub_w = wire_add_sub4_result,
		man_all_zeros_w = {52{1'b0}},
		man_b_not_zero_w = {(datab[51] | man_b_not_zero_w[50]), (datab[50] | man_b_not_zero_w[49]), (datab[49] | man_b_not_zero_w[48]), (datab[48] | man_b_not_zero_w[47]), (datab[47] | man_b_not_zero_w[46]), (datab[46] | man_b_not_zero_w[45]), (datab[45] | man_b_not_zero_w[44]), (datab[44] | man_b_not_zero_w[43]), (datab[43] | man_b_not_zero_w[42]), (datab[42] | man_b_not_zero_w[41]), (datab[41] | man_b_not_zero_w[40]), (datab[40] | man_b_not_zero_w[39]), (datab[39] | man_b_not_zero_w[38]), (datab[38] | man_b_not_zero_w[37]), (datab[37] | man_b_not_zero_w[36]), (datab[36] | man_b_not_zero_w[35]), (datab[35] | man_b_not_zero_w[34]), (datab[34] | man_b_not_zero_w[33]), (datab[33] | man_b_not_zero_w[32]), (datab[32] | man_b_not_zero_w[31]), (datab[31] | man_b_not_zero_w[30]), (datab[30] | man_b_not_zero_w[29]), (datab[29] | man_b_not_zero_w[28]), (datab[28] | man_b_not_zero_w[27]), (datab[27] | man_b_not_zero_w[26]), (datab[26] | man_b_not_zero_w[25]), (datab[25] | man_b_not_zero_w[24]), (datab[24] | man_b_not_zero_w[23]), (datab[23] | man_b_not_zero_w[22]), (datab[22] | man_b_not_zero_w[21]), (datab[21] | man_b_not_zero_w[20]), (datab[20] | man_b_not_zero_w[19]), (datab[19] | man_b_not_zero_w[18]), (datab[18] | man_b_not_zero_w[17]), (datab[17] | man_b_not_zero_w[16]), (datab[16] | man_b_not_zero_w[15]), (datab[15] | man_b_not_zero_w[14]), (datab[14] | man_b_not_zero_w[13]), (datab[13] | man_b_not_zero_w[12]), (datab[12] | man_b_not_zero_w[11]), (datab[11] | man_b_not_zero_w[10]), (datab[10] | man_b_not_zero_w[9]), (datab[9] | man_b_not_zero_w[8]), (datab[8] | man_b_not_zero_w[7]), (datab[7] | man_b_not_zero_w[6]), (datab[6] | man_b_not_zero_w[5]), (datab[5] | man_b_not_zero_w[4]), (datab[4] | man_b_not_zero_w[3]), (datab[3] | man_b_not_zero_w[2]), (datab[2] | man_b_not_zero_w[1]), (datab[1] | man_b_not_zero_w[0]), datab[0]},
		man_dffe31_wo = man_dffe31,
		man_intermediate_res_w = {{2{1'b0}}, man_res_w3},
		man_leading_zeros_cnt_w = man_leading_zeros_dffe31_wo,
		man_leading_zeros_dffe31_wi = (~ wire_leading_zeroes_cnt_q),
		man_leading_zeros_dffe31_wo = man_leading_zeros_dffe31,
		man_nan_w = 52'b1000000000000000000000000000000000000000000000000000,
		man_out_dffe5_wi = (({52{force_nan_w}} & man_nan_w) | ({52{(~ force_nan_w)}} & (({52{force_infinity_w}} & man_all_zeros_w) | ({52{(~ force_infinity_w)}} & (({52{(force_zero_w | denormal_flag_w)}} & man_all_zeros_w) | ({52{(~ (force_zero_w | denormal_flag_w))}} & man_res_dffe4_wo)))))),
		man_out_dffe5_wo = man_out_dffe5,
		man_res_dffe4_wi = man_rounded_res_w,
		man_res_dffe4_wo = man_res_dffe4,
		man_res_is_not_zero_dffe31_wi = man_res_not_zero_dffe26_wo,
		man_res_is_not_zero_dffe31_wo = man_res_is_not_zero_dffe31,
		man_res_is_not_zero_dffe32_wi = man_res_is_not_zero_dffe31_wo,
		man_res_is_not_zero_dffe32_wo = man_res_is_not_zero_dffe32,
		man_res_is_not_zero_dffe33_wi = man_res_is_not_zero_dffe32_wo,
		man_res_is_not_zero_dffe33_wo = man_res_is_not_zero_dffe33_wi,
		man_res_is_not_zero_dffe3_wi = man_res_is_not_zero_dffe33_wo,
		man_res_is_not_zero_dffe3_wo = man_res_is_not_zero_dffe3,
		man_res_is_not_zero_dffe41_wi = man_res_is_not_zero_dffe42_wo,
		man_res_is_not_zero_dffe41_wo = man_res_is_not_zero_dffe41_wi,
		man_res_is_not_zero_dffe42_wi = man_res_is_not_zero_dffe3_wo,
		man_res_is_not_zero_dffe42_wo = man_res_is_not_zero_dffe42_wi,
		man_res_is_not_zero_dffe4_wi = man_res_is_not_zero_dffe41_wo,
		man_res_is_not_zero_dffe4_wo = man_res_is_not_zero_dffe4,
		man_res_mag_w2 = (({55{man_add_sub_res_mag_dffe27_wo[55]}} & man_add_sub_res_mag_dffe27_wo[55:1]) | ({55{(~ man_add_sub_res_mag_dffe27_wo[55])}} & man_add_sub_res_mag_dffe27_wo[54:0])),
		man_res_not_zero_dffe23_wi = man_res_not_zero_w2[53],
		man_res_not_zero_dffe23_wo = man_res_not_zero_dffe23,
		man_res_not_zero_dffe26_wi = man_res_not_zero_dffe23_wo,
		man_res_not_zero_dffe26_wo = man_res_not_zero_dffe26_wi,
		man_res_not_zero_w2 = {(man_res_not_zero_w2[52] | man_add_sub_res_mag_dffe21_wo[54]), (man_res_not_zero_w2[51] | man_add_sub_res_mag_dffe21_wo[53]), (man_res_not_zero_w2[50] | man_add_sub_res_mag_dffe21_wo[52]), (man_res_not_zero_w2[49] | man_add_sub_res_mag_dffe21_wo[51]), (man_res_not_zero_w2[48] | man_add_sub_res_mag_dffe21_wo[50]), (man_res_not_zero_w2[47] | man_add_sub_res_mag_dffe21_wo[49]), (man_res_not_zero_w2[46] | man_add_sub_res_mag_dffe21_wo[48]), (man_res_not_zero_w2[45] | man_add_sub_res_mag_dffe21_wo[47]), (man_res_not_zero_w2[44] | man_add_sub_res_mag_dffe21_wo[46]), (man_res_not_zero_w2[43] | man_add_sub_res_mag_dffe21_wo[45]), (man_res_not_zero_w2[42] | man_add_sub_res_mag_dffe21_wo[44]), (man_res_not_zero_w2[41] | man_add_sub_res_mag_dffe21_wo[43]), (man_res_not_zero_w2[40] | man_add_sub_res_mag_dffe21_wo[42]), (man_res_not_zero_w2[39] | man_add_sub_res_mag_dffe21_wo[41]), (man_res_not_zero_w2[38] | man_add_sub_res_mag_dffe21_wo[40]), (man_res_not_zero_w2[37] | man_add_sub_res_mag_dffe21_wo[39]), (man_res_not_zero_w2[36] | man_add_sub_res_mag_dffe21_wo[38]), (man_res_not_zero_w2[35] | man_add_sub_res_mag_dffe21_wo[37]), (man_res_not_zero_w2[34] | man_add_sub_res_mag_dffe21_wo[36]), (man_res_not_zero_w2[33] | man_add_sub_res_mag_dffe21_wo[35]), (man_res_not_zero_w2[32] | man_add_sub_res_mag_dffe21_wo[34]), (man_res_not_zero_w2[31] | man_add_sub_res_mag_dffe21_wo[33]), (man_res_not_zero_w2[30] | man_add_sub_res_mag_dffe21_wo[32]), (man_res_not_zero_w2[29] | man_add_sub_res_mag_dffe21_wo[31]), (man_res_not_zero_w2[28] | man_add_sub_res_mag_dffe21_wo[30]), (man_res_not_zero_w2[27] | man_add_sub_res_mag_dffe21_wo[29]), (man_res_not_zero_w2[26] | man_add_sub_res_mag_dffe21_wo[28]), (man_res_not_zero_w2[25] | man_add_sub_res_mag_dffe21_wo[27]), (man_res_not_zero_w2[24] | man_add_sub_res_mag_dffe21_wo[26]), (man_res_not_zero_w2[23] | man_add_sub_res_mag_dffe21_wo[25]), (man_res_not_zero_w2[22] | man_add_sub_res_mag_dffe21_wo[24]), (man_res_not_zero_w2[21] | man_add_sub_res_mag_dffe21_wo[23]), (man_res_not_zero_w2[20]
 | man_add_sub_res_mag_dffe21_wo[22]), (man_res_not_zero_w2[19] | man_add_sub_res_mag_dffe21_wo[21]), (man_res_not_zero_w2[18] | man_add_sub_res_mag_dffe21_wo[20]), (man_res_not_zero_w2[17] | man_add_sub_res_mag_dffe21_wo[19]), (man_res_not_zero_w2[16] | man_add_sub_res_mag_dffe21_wo[18]), (man_res_not_zero_w2[15] | man_add_sub_res_mag_dffe21_wo[17]), (man_res_not_zero_w2[14] | man_add_sub_res_mag_dffe21_wo[16]), (man_res_not_zero_w2[13] | man_add_sub_res_mag_dffe21_wo[15]), (man_res_not_zero_w2[12] | man_add_sub_res_mag_dffe21_wo[14]), (man_res_not_zero_w2[11] | man_add_sub_res_mag_dffe21_wo[13]), (man_res_not_zero_w2[10] | man_add_sub_res_mag_dffe21_wo[12]), (man_res_not_zero_w2[9] | man_add_sub_res_mag_dffe21_wo[11]), (man_res_not_zero_w2[8] | man_add_sub_res_mag_dffe21_wo[10]), (man_res_not_zero_w2[7] | man_add_sub_res_mag_dffe21_wo[9]), (man_res_not_zero_w2[6] | man_add_sub_res_mag_dffe21_wo[8]), (man_res_not_zero_w2[5] | man_add_sub_res_mag_dffe21_wo[7]), (man_res_not_zero_w2[4] | man_add_sub_res_mag_dffe21_wo[6]), (man_res_not_zero_w2[3] | man_add_sub_res_mag_dffe21_wo[5]), (man_res_not_zero_w2[2] | man_add_sub_res_mag_dffe21_wo[4]), (man_res_not_zero_w2[1] | man_add_sub_res_mag_dffe21_wo[3]), (man_res_not_zero_w2[0] | man_add_sub_res_mag_dffe21_wo[2]), man_add_sub_res_mag_dffe21_wo[1]},
		man_res_rounding_add_sub_datab_w = {{54{1'b0}}, man_rounding_add_value_w},
		man_res_rounding_add_sub_w = wire_add_sub8_result,
		man_res_w3 = wire_lbarrel_shift_result[54:2],
		man_rounded_res_w = (({52{man_res_rounding_add_sub_w[53]}} & man_res_rounding_add_sub_w[52:1]) | ({52{(~ man_res_rounding_add_sub_w[53])}} & man_res_rounding_add_sub_w[51:0])),
		man_rounding_add_value_w = (round_bit_dffe3_wo & (sticky_bit_dffe3_wo | guard_bit_dffe3_wo)),
		man_smaller_dffe13_wi = man_smaller_w,
		man_smaller_dffe13_wo = man_smaller_dffe13,
		man_smaller_w = (({53{exp_amb_mux_w}} & aligned_dataa_man_dffe12_wo) | ({53{(~ exp_amb_mux_w)}} & aligned_datab_man_dffe12_wo)),
		need_complement_dffe22_wi = need_complement_dffe2_wo,
		need_complement_dffe22_wo = need_complement_dffe22_wi,
		need_complement_dffe2_wi = dataa_sign_dffe25_wo,
		need_complement_dffe2_wo = need_complement_dffe2,
		pos_sign_bit_ext = {2{1'b0}},
		priority_encoder_1pads_w = {6{1'b1}},
		result = {sign_out_dffe5_wo, exp_out_dffe5_wo, man_out_dffe5_wo},
		round_bit_dffe21_wi = round_bit_w,
		round_bit_dffe21_wo = round_bit_dffe21,
		round_bit_dffe23_wi = round_bit_dffe21_wo,
		round_bit_dffe23_wo = round_bit_dffe23,
		round_bit_dffe26_wi = round_bit_dffe23_wo,
		round_bit_dffe26_wo = round_bit_dffe26_wi,
		round_bit_dffe31_wi = round_bit_dffe26_wo,
		round_bit_dffe31_wo = round_bit_dffe31,
		round_bit_dffe32_wi = round_bit_dffe31_wo,
		round_bit_dffe32_wo = round_bit_dffe32,
		round_bit_dffe33_wi = round_bit_dffe32_wo,
		round_bit_dffe33_wo = round_bit_dffe33_wi,
		round_bit_dffe3_wi = round_bit_dffe33_wo,
		round_bit_dffe3_wo = round_bit_dffe3,
		round_bit_w = ((((((~ man_add_sub_res_mag_dffe27_wo[55]) & (~ man_add_sub_res_mag_dffe27_wo[54])) & man_add_sub_res_mag_dffe27_wo[0]) | (((~ man_add_sub_res_mag_dffe27_wo[55]) & man_add_sub_res_mag_dffe27_wo[54]) & man_add_sub_res_mag_dffe27_wo[1])) | ((man_add_sub_res_mag_dffe27_wo[55] & (~ man_add_sub_res_mag_dffe27_wo[54])) & man_add_sub_res_mag_dffe27_wo[2])) | ((man_add_sub_res_mag_dffe27_wo[55] & man_add_sub_res_mag_dffe27_wo[54]) & man_add_sub_res_mag_dffe27_wo[2])),
		rounded_res_infinity_dffe4_wi = exp_rounded_res_infinity_w,
		rounded_res_infinity_dffe4_wo = rounded_res_infinity_dffe4,
		rshift_distance_dffe13_wi = rshift_distance_w,
		rshift_distance_dffe13_wo = rshift_distance_dffe13,
		rshift_distance_dffe14_wi = rshift_distance_dffe13_wo,
		rshift_distance_dffe14_wo = rshift_distance_dffe14,
		rshift_distance_dffe15_wi = rshift_distance_dffe14_wo,
		rshift_distance_dffe15_wo = rshift_distance_dffe15_wi,
		rshift_distance_w = (({6{exp_diff_abs_exceed_max_w[4]}} & exp_diff_abs_max_w) | ({6{(~ exp_diff_abs_exceed_max_w[4])}} & exp_diff_abs_w[5:0])),
		sign_dffe31_wi = ((man_res_not_zero_dffe26_wo & man_add_sub_res_sign_dffe26_wo) | ((~ man_res_not_zero_dffe26_wo) & zero_man_sign_dffe26_wo)),
		sign_dffe31_wo = sign_dffe31,
		sign_dffe32_wi = sign_dffe31_wo,
		sign_dffe32_wo = sign_dffe32,
		sign_dffe33_wi = sign_dffe32_wo,
		sign_dffe33_wo = sign_dffe33_wi,
		sign_out_dffe5_wi = ((~ force_nan_w) & ((force_infinity_w & infinite_output_sign_dffe4_wo) | ((~ force_infinity_w) & sign_res_dffe4_wo))),
		sign_out_dffe5_wo = sign_out_dffe5,
		sign_res_dffe3_wi = sign_dffe33_wo,
		sign_res_dffe3_wo = sign_res_dffe3,
		sign_res_dffe41_wi = sign_res_dffe42_wo,
		sign_res_dffe41_wo = sign_res_dffe41_wi,
		sign_res_dffe42_wi = sign_res_dffe3_wo,
		sign_res_dffe42_wo = sign_res_dffe42_wi,
		sign_res_dffe4_wi = sign_res_dffe41_wo,
		sign_res_dffe4_wo = sign_res_dffe4,
		sticky_bit_cnt_dataa_w = {1'b0, rshift_distance_dffe15_wo},
		sticky_bit_cnt_datab_w = {1'b0, wire_trailing_zeros_cnt_q},
		sticky_bit_cnt_res_w = wire_add_sub3_result,
		sticky_bit_dffe1_wi = wire_trailing_zeros_limit_comparator_agb,
		sticky_bit_dffe1_wo = sticky_bit_dffe1,
		sticky_bit_dffe21_wi = sticky_bit_w,
		sticky_bit_dffe21_wo = sticky_bit_dffe21,
		sticky_bit_dffe22_wi = sticky_bit_dffe2_wo,
		sticky_bit_dffe22_wo = sticky_bit_dffe22_wi,
		sticky_bit_dffe23_wi = sticky_bit_dffe21_wo,
		sticky_bit_dffe23_wo = sticky_bit_dffe23,
		sticky_bit_dffe25_wi = sticky_bit_dffe1_wo,
		sticky_bit_dffe25_wo = sticky_bit_dffe25_wi,
		sticky_bit_dffe26_wi = sticky_bit_dffe23_wo,
		sticky_bit_dffe26_wo = sticky_bit_dffe26_wi,
		sticky_bit_dffe27_wi = sticky_bit_dffe22_wo,
		sticky_bit_dffe27_wo = sticky_bit_dffe27,
		sticky_bit_dffe2_wi = sticky_bit_dffe25_wo,
		sticky_bit_dffe2_wo = sticky_bit_dffe2,
		sticky_bit_dffe31_wi = sticky_bit_dffe26_wo,
		sticky_bit_dffe31_wo = sticky_bit_dffe31,
		sticky_bit_dffe32_wi = sticky_bit_dffe31_wo,
		sticky_bit_dffe32_wo = sticky_bit_dffe32,
		sticky_bit_dffe33_wi = sticky_bit_dffe32_wo,
		sticky_bit_dffe33_wo = sticky_bit_dffe33_wi,
		sticky_bit_dffe3_wi = sticky_bit_dffe33_wo,
		sticky_bit_dffe3_wo = sticky_bit_dffe3,
		sticky_bit_w = ((((((~ man_add_sub_res_mag_dffe27_wo[55]) & (~ man_add_sub_res_mag_dffe27_wo[54])) & sticky_bit_dffe27_wo) | (((~ man_add_sub_res_mag_dffe27_wo[55]) & man_add_sub_res_mag_dffe27_wo[54]) & (sticky_bit_dffe27_wo | man_add_sub_res_mag_dffe27_wo[0]))) | ((man_add_sub_res_mag_dffe27_wo[55] & (~ man_add_sub_res_mag_dffe27_wo[54])) & ((sticky_bit_dffe27_wo | man_add_sub_res_mag_dffe27_wo[0]) | man_add_sub_res_mag_dffe27_wo[1]))) | ((man_add_sub_res_mag_dffe27_wo[55] & man_add_sub_res_mag_dffe27_wo[54]) & ((sticky_bit_dffe27_wo | man_add_sub_res_mag_dffe27_wo[0]) | man_add_sub_res_mag_dffe27_wo[1]))),
		trailing_zeros_limit_w = 7'b0000010,
		zero_man_sign_dffe21_wi = zero_man_sign_dffe27_wo,
		zero_man_sign_dffe21_wo = zero_man_sign_dffe21,
		zero_man_sign_dffe22_wi = zero_man_sign_dffe2_wo,
		zero_man_sign_dffe22_wo = zero_man_sign_dffe22_wi,
		zero_man_sign_dffe23_wi = zero_man_sign_dffe21_wo,
		zero_man_sign_dffe23_wo = zero_man_sign_dffe23,
		zero_man_sign_dffe26_wi = zero_man_sign_dffe23_wo,
		zero_man_sign_dffe26_wo = zero_man_sign_dffe26_wi,
		zero_man_sign_dffe27_wi = zero_man_sign_dffe22_wo,
		zero_man_sign_dffe27_wo = zero_man_sign_dffe27,
		zero_man_sign_dffe2_wi = (dataa_sign_dffe25_wo & add_sub_dffe25_wo),
		zero_man_sign_dffe2_wo = zero_man_sign_dffe2;
endmodule //AlteraAdder_altfp_add_sub
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module AlteraAdder (
	clock,
	dataa,
	datab,
	result)/* synthesis synthesis_clearbox = 1 */;

	input	  clock;
	input	[63:0]  dataa;
	input	[63:0]  datab;
	output	[63:0]  result;

	wire [63:0] sub_wire0;
	wire [63:0] result = sub_wire0[63:0];

	AlteraAdder_altfp_add_sub	AlteraAdder_altfp_add_sub_component (
				.clock (clock),
				.dataa (dataa),
				.datab (datab),
				.result (sub_wire0));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: FPM_FORMAT NUMERIC "1"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone V"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: WIDTH_DATA NUMERIC "64"
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: CONSTANT: DENORMAL_SUPPORT STRING "NO"
// Retrieval info: CONSTANT: DIRECTION STRING "ADD"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Cyclone V"
// Retrieval info: CONSTANT: OPTIMIZE STRING "AREA"
// Retrieval info: CONSTANT: PIPELINE NUMERIC "14"
// Retrieval info: CONSTANT: REDUCED_FUNCTIONALITY STRING "NO"
// Retrieval info: CONSTANT: WIDTH_EXP NUMERIC "11"
// Retrieval info: CONSTANT: WIDTH_MAN NUMERIC "52"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: USED_PORT: dataa 0 0 64 0 INPUT NODEFVAL "dataa[63..0]"
// Retrieval info: USED_PORT: datab 0 0 64 0 INPUT NODEFVAL "datab[63..0]"
// Retrieval info: USED_PORT: result 0 0 64 0 OUTPUT NODEFVAL "result[63..0]"
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: CONNECT: @dataa 0 0 64 0 dataa 0 0 64 0
// Retrieval info: CONNECT: @datab 0 0 64 0 datab 0 0 64 0
// Retrieval info: CONNECT: result 0 0 64 0 @result 0 0 64 0
// Retrieval info: GEN_FILE: TYPE_NORMAL AlteraAdder.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL AlteraAdder.inc TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL AlteraAdder.cmp TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL AlteraAdder.bsf TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL AlteraAdder_inst.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL AlteraAdder_bb.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL AlteraAdder_syn.v TRUE
// Retrieval info: LIB_FILE: lpm
